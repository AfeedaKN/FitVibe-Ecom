<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>FitVibe - Edit Profile</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
      min-height: 100vh;
      margin-left: 250px;
      transition: margin-left 0.3s ease;
    }

    .main-content {
      padding: 2rem;
      max-width: 800px;
      margin: 0 auto;
    }

    .page-header {
      background: #ffffff;
      border-radius: 16px;
      padding: 2rem;
      margin-bottom: 2rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      border-left: 4px solid #667eea;
    }

    .page-title {
      font-size: 2rem;
      font-weight: 700;
      color: #0f172a;
      margin-bottom: 0.5rem;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .page-subtitle {
      font-size: 0.875rem;
      color: #64748b;
      font-weight: 400;
    }

    .form-container {
      background: #ffffff;
      border-radius: 16px;
      padding: 2rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      border: 1px solid #e2e8f0;
    }

    .profile-image-section {
      text-align: center;
      margin-bottom: 2rem;
      padding-bottom: 2rem;
      border-bottom: 1px solid #e2e8f0;
    }

    .profile-image-container {
      position: relative;
      display: inline-block;
      margin-bottom: 1rem;
    }

    .profile-image {
      width: 120px;
      height: 120px;
      border-radius: 50%;
      object-fit: cover;
      border: 4px solid #ffffff;
      box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
      transition: all 0.3s ease;
    }

    .profile-image:hover {
      transform: scale(1.05);
      box-shadow: 0 12px 25px rgba(102, 126, 234, 0.4);
    }

    .image-upload-overlay {
      position: absolute;
      bottom: 0;
      right: 0;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: #ffffff;
      border-radius: 50%;
      width: 36px;
      height: 36px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
      border: 3px solid #ffffff;
    }

    .image-upload-overlay:hover {
      transform: scale(1.1);
    }

    .image-upload-input {
      display: none;
    }

    .image-upload-text {
      font-size: 0.875rem;
      color: #64748b;
      margin-top: 0.5rem;
    }

    .edit-form {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }

    .form-row {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1.5rem;
    }

    .form-group {
      position: relative;
    }

    .form-label {
      display: block;
      font-size: 0.875rem;
      font-weight: 600;
      color: #374151;
      margin-bottom: 0.5rem;
    }

    .form-input {
      width: 100%;
      padding: 1rem 1.25rem;
      font-size: 0.875rem;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      outline: none;
      transition: all 0.3s ease;
      background: #ffffff;
      color: #0f172a;
      font-weight: 500;
    }

    .form-input:focus {
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
      transform: translateY(-2px);
    }

    .form-input::placeholder {
      color: #94a3b8;
      font-weight: 400;
    }

    .form-input.input-error {
      border-color: #ef4444;
      box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
    }

    .input-icon {
      position: absolute;
      right: 1rem;
      top: 50%;
      transform: translateY(-50%);
      color: #94a3b8;
      font-size: 1rem;
      transition: color 0.3s ease;
    }

    .form-input:focus + .input-icon {
      color: #667eea;
    }

    .save-btn {
      width: 100%;
      padding: 1rem 1.5rem;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: #ffffff;
      border: none;
      border-radius: 12px;
      font-size: 0.875rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      margin-top: 1rem;
    }

    .save-btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 12px 25px rgba(102, 126, 234, 0.4);
    }

    .save-btn:active {
      transform: translateY(-1px);
    }

    .save-btn:disabled {
      opacity: 0.7;
      cursor: not-allowed;
      transform: none;
    }

    .error-message {
      color: #ef4444;
      font-size: 0.75rem;
      font-weight: 500;
      margin-top: 0.5rem;
      padding: 0.5rem 0.75rem;
      background: rgba(239, 68, 68, 0.1);
      border-radius: 8px;
      border-left: 3px solid #ef4444;
      display: none;
      align-items: center;
      gap: 0.5rem;
    }

    .error-message.show {
      display: flex;
    }

    .success-message {
      color: #10b981;
      font-size: 0.75rem;
      font-weight: 500;
      margin-top: 0.5rem;
      padding: 0.5rem 0.75rem;
      background: rgba(16, 185, 129, 0.1);
      border-radius: 8px;
      border-left: 3px solid #10b981;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .info-box {
      background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
      border: 1px solid rgba(102, 126, 234, 0.2);
      border-radius: 12px;
      padding: 1.5rem;
      margin-top: 2rem;
    }

    .info-box h3 {
      font-size: 1rem;
      font-weight: 600;
      color: #0f172a;
      margin-bottom: 1rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .info-box p {
      font-size: 0.875rem;
      color: #64748b;
      line-height: 1.5;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      body {
        margin-left: 0;
      }

      .main-content {
        padding: 1rem;
      }

      .page-header,
      .form-container {
        padding: 1.5rem;
      }

      .page-title {
        font-size: 1.5rem;
      }

      .form-row {
        grid-template-columns: 1fr;
        gap: 1rem;
      }

      .profile-image {
        width: 100px;
        height: 100px;
      }
    }

    /* Animation */
    @keyframes slideUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .form-container {
      animation: slideUp 0.5s ease-out;
    }

    /* Loading state */
    .loading {
      opacity: 0.7;
      pointer-events: none;
    }

    .spinner {
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <%- include('./partials/sidebar') %>

  <div class="main-content">
    <!-- Page Header -->
    <div class="page-header">
      <h1 class="page-title">Edit Profile</h1>
      <p class="page-subtitle">Update your personal information and profile picture</p>
    </div>

    <!-- Form Container -->
    <div class="form-container">
      <!-- Profile Image Section -->
      <div class="profile-image-section">
        <div class="profile-image-container">
          <img src="/image/profileimage.jpeg" alt="Profile Image" id="profilePreview" class="profile-image">
          <label for="profileImageInput" class="image-upload-overlay">
            <i class="fas fa-camera"></i>
          </label>
        </div>
        <div class="image-upload-text">Click the camera icon to change your profile picture</div>
      </div>

      <!-- Edit Form -->
      <form id="editForm" class="edit-form" enctype="multipart/form-data">
        <input 
          type="file" 
          name="profileImage" 
          id="profileImageInput"
          accept="image/*" 
          class="image-upload-input" 
          onchange="previewImage(event)"
        />

        <div class="form-row">
          <div class="form-group">
            <label for="nameInput" class="form-label">Full Name</label>
            <input 
              type="text" 
              name="name" 
              id="nameInput" 
              value="<%= user.name %>" 
              class="form-input" 
              placeholder="Enter your full name"
            />
            <i class="fas fa-user input-icon"></i>
            <div class="error-message" id="nameError">
              <i class="fas fa-exclamation-circle"></i>
              <span></span>
            </div>
          </div>

          <div class="form-group">
            <label for="emailInput" class="form-label">Email Address</label>
            <input 
              type="email" 
              name="email" 
              id="emailInput" 
              value="<%= user.email %>" 
              class="form-input" 
              placeholder="Enter your email address"
            />
            <i class="fas fa-envelope input-icon"></i>
            <div class="error-message" id="emailError">
              <i class="fas fa-exclamation-circle"></i>
              <span></span>
            </div>
          </div>
        </div>

        <div class="form-group">
          <label for="phoneInput" class="form-label">Phone Number</label>
          <input 
            type="tel" 
            name="phone" 
            id="phoneInput" 
            value="<%= user.phone || '' %>" 
            class="form-input" 
            placeholder="Enter your phone number"
          />
          <i class="fas fa-phone input-icon"></i>
          <div class="error-message" id="phoneError">
            <i class="fas fa-exclamation-circle"></i>
            <span></span>
          </div>
        </div>

        <button type="submit" class="save-btn" id="saveBtn">
          <i class="fas fa-save"></i>
          Save Changes
        </button>
      </form>

      <!-- Info Box -->
      <div class="info-box">
        <h3>
          <i class="fas fa-info-circle"></i>
          Important Information
        </h3>
        <p>
          If you change your email address, you'll need to verify it with an OTP sent to your new email. 
          Changes to name and phone number don't require verification.
        </p>
      </div>
    </div>
  </div>

  <script>
    const originalEmail = '<%= user.email %>';
    const editForm = document.getElementById('editForm');
    const nameInput = document.getElementById('nameInput');
    const emailInput = document.getElementById('emailInput');
    const phoneInput = document.getElementById('phoneInput');
    const nameError = document.getElementById('nameError');
    const emailError = document.getElementById('emailError');
    const phoneError = document.getElementById('phoneError');
    const saveBtn = document.getElementById('saveBtn');

    // Check if returning from OTP verification or email was updated
    document.addEventListener('DOMContentLoaded', () => {
      const urlParams = new URLSearchParams(window.location.search);
      const emailUpdated = urlParams.get('emailUpdated');
      
      if (emailUpdated === 'true') {
        // Email was successfully updated via OTP verification
        showSuccessMessage('Email verified and updated successfully!');
        
        // Clear URL parameter
        window.history.replaceState({}, document.title, window.location.pathname);
        
        // Check for saved form data to update other fields
        const savedFormData = sessionStorage.getItem('profileFormData');
        if (savedFormData) {
          try {
            const formData = JSON.parse(savedFormData);
            if (formData.name && formData.name !== nameInput.value) {
              nameInput.value = formData.name;
            }
            if (formData.phone && formData.phone !== phoneInput.value) {
              phoneInput.value = formData.phone;
            }
            
            // Auto-submit the form to update name and phone if they were changed
            if ((formData.name && formData.name !== nameInput.value) || 
                (formData.phone && formData.phone !== phoneInput.value)) {
              setTimeout(() => {
                submitProfileUpdate(new FormData(editForm));
              }, 1000);
            }
            
            sessionStorage.removeItem('profileFormData');
          } catch (error) {
            console.error('Error loading saved form data:', error);
          }
        }
      } else {
        // Check for saved form data from OTP verification
        const savedFormData = sessionStorage.getItem('profileFormData');
        if (savedFormData) {
          try {
            const formData = JSON.parse(savedFormData);
            if (formData.name) nameInput.value = formData.name;
            if (formData.phone) phoneInput.value = formData.phone;
            sessionStorage.removeItem('profileFormData');
          } catch (error) {
            console.error('Error loading saved form data:', error);
          }
        }
      }
    });

    // Validation functions
    function validateName(name) {
      const regex = /^[a-zA-Z\s]+$/;
      if (!name.trim()) {
        showError(nameError, 'Name is required');
        return false;
      } else if (!regex.test(name)) {
        showError(nameError, 'Name can only contain letters and spaces');
        return false;
      } else if (name.length > 10) {
        showError(nameError, 'Name cannot exceed 10 characters');
        return false;
      }
      hideError(nameError);
      return true;

    }
    

    function validateEmail(email) {
      const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!email.trim()) {
        showError(emailError, 'Email is required');
        return false;
      } else if (!regex.test(email)) {
        showError(emailError, 'Please enter a valid email address');
        return false;
      }
      hideError(emailError);
      return true;
    }

    function validatePhone(phone) {
      const regex = /^[6-9]\d{9}$/;
      if (phone && !regex.test(phone)) {
        showError(phoneError, 'Please enter a valid 10-digit phone number starting with 6-9');
        return false;
      }
      hideError(phoneError);
      return true;
    }

    function showError(errorElement, message) {
      errorElement.querySelector('span').textContent = message;
      errorElement.classList.add('show');
      errorElement.previousElementSibling.classList.add('input-error');
    }

    function hideError(errorElement) {
      errorElement.classList.remove('show');
      errorElement.previousElementSibling.classList.remove('input-error');
    }

    // Real-time validation
    nameInput.addEventListener('input', () => validateName(nameInput.value));
    emailInput.addEventListener('input', () => validateEmail(emailInput.value));
    phoneInput.addEventListener('input', () => validatePhone(phoneInput.value));

    // Profile image preview
    function previewImage(event) {
      const file = event.target.files[0];
      if (file) {
        // Validate file type
        if (!file.type.startsWith('image/')) {
          alert('Please select a valid image file');
          return;
        }
        
        // Validate file size (max 5MB)
        if (file.size > 5 * 1024 * 1024) {
          alert('Image size should be less than 5MB');
          return;
        }

        const reader = new FileReader();
        reader.onload = (e) => {
          document.getElementById('profilePreview').src = e.target.result;
        };
        reader.readAsDataURL(file);
      }
    }

    // Form submission
    editForm.addEventListener('submit', async (e) => {
      e.preventDefault();

      const nameValid = validateName(nameInput.value);
      const emailValid = validateEmail(emailInput.value);
      const phoneValid = validatePhone(phoneInput.value);

      if (!nameValid || !emailValid || !phoneValid) {
        return;
      }

      // Show loading state
      saveBtn.disabled = true;
      saveBtn.innerHTML = '<i class="fas fa-spinner spinner"></i> Saving Changes...';

      const formData = new FormData(editForm);
      const email = formData.get('email');

      try {
        if (email !== originalEmail) {
          // Email changed, need OTP verification
          const response = await fetch('/profile/send-otp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email })
          });
          
          const result = await response.json();
          
          if (result.success) {
            // Store form data in session storage for later use
            const formDataObj = {};
            for (let [key, value] of formData.entries()) {
              if (key !== 'profileImage') { // Don't store file data
                formDataObj[key] = value;
              }
            }
            sessionStorage.setItem('profileFormData', JSON.stringify(formDataObj));
            
            // Show success message and redirect
            showSuccessMessage('OTP sent to your new email address. Redirecting...');
            setTimeout(() => {
              window.location.href = '/profile/verify-otp';
            }, 2000);
          } else {
            showError(emailError, result.message || 'Failed to send OTP');
          }
        } else {
          // Email unchanged, submit directly
          await submitProfileUpdate(formData);
        }
      } catch (error) {
        showError(emailError, 'Network error. Please try again.');
      } finally {
        // Reset button
        saveBtn.disabled = false;
        saveBtn.innerHTML = '<i class="fas fa-save"></i> Save Changes';
      }
    });

    async function submitProfileUpdate(formData) {
      try {
        const response = await fetch('/profile/edit', {
          method: 'POST',
          body: formData
        });
        
        const result = await response.json();
        
        if (result.success) {
          // Show success message
          showSuccessMessage('Profile updated successfully!');
          
          // Redirect after delay
          setTimeout(() => {
            window.location.href = '/user/account';
          }, 2000);
        } else {
          showError(emailError, result.message || 'Failed to update profile');
        }
      } catch (error) {
        showError(emailError, 'Error updating profile. Please try again.');
      }
    }

    function showSuccessMessage(message) {
      // Remove existing messages
      const existingMessages = document.querySelectorAll('.success-message');
      existingMessages.forEach(msg => msg.remove());
      
      // Create success message
      const messageDiv = document.createElement('div');
      messageDiv.className = 'success-message';
      messageDiv.innerHTML = `
        <i class="fas fa-check-circle"></i>
        ${message}
      `;
      
      // Insert after form
      editForm.appendChild(messageDiv);
      
      // Auto-remove after 5 seconds
      setTimeout(() => {
        if (messageDiv.parentNode) {
          messageDiv.remove();
        }
      }, 5000);
    }
  </script>
</body>
</html>