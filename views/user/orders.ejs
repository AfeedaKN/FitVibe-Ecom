<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>FitVibe - My Orders</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <style>
    /* Professional Orders Page - Matching Profile Theme */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: #f8fafc;
      color: #1e293b;
      line-height: 1.6;
      margin-left: 280px;
    }

    .orders-container {
      padding: 2rem 1.5rem;
      max-width: 1200px;
      margin: 0 auto;
    }

    /* Page Header */
    .page-header {
      margin-bottom: 2rem;
      padding-bottom: 1rem;
      border-bottom: 2px solid #e2e8f0;
    }

    .page-title {
      font-size: 2.25rem;
      font-weight: 700;
      color: #0f172a;
      margin: 0;
      letter-spacing: -0.025em;
    }

    .page-subtitle {
      font-size: 1rem;
      color: #64748b;
      margin-top: 0.5rem;
    }

    /* Search Section */
    .search-section {
      background: #ffffff;
      border: 1px solid #e2e8f0;
      border-radius: 16px;
      padding: 1.5rem;
      margin-bottom: 2rem;
      box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
    }

    .search-form {
      display: flex;
      gap: 1rem;
      align-items: center;
    }

    .search-input {
      flex: 1;
      padding: 0.75rem 1rem;
      border: 1px solid #e2e8f0;
      border-radius: 12px;
      font-size: 0.875rem;
      transition: all 0.3s ease;
      background: #f8fafc;
    }

    .search-input:focus {
      outline: none;
      border-color: #6366f1;
      background: #ffffff;
      box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
    }

    .search-btn {
      padding: 0.75rem 1.5rem;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: #ffffff;
      border: none;
      border-radius: 12px;
      font-size: 0.875rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .search-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 15px -3px rgba(102, 126, 234, 0.4);
    }

    /* Orders Grid */
    .orders-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .order-card {
      background: #ffffff;
      border: 1px solid #e2e8f0;
      border-radius: 16px;
      padding: 1.5rem;
      box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease;
      cursor: pointer;
      position: relative;
    }

    .order-card:hover {
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
      transform: translateY(-2px);
    }

    .order-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 1rem;
    }

    .order-id {
      font-size: 1.125rem;
      font-weight: 600;
      color: #0f172a;
      margin: 0;
    }

    .order-date {
      font-size: 0.875rem;
      color: #64748b;
    }

    .order-details {
      display: grid;
      gap: 0.75rem;
      margin-bottom: 1.5rem;
    }

    .detail-row {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.5rem 0;
      border-bottom: 1px solid #f1f5f9;
    }

    .detail-row:last-child {
      border-bottom: none;
    }

    .detail-label {
      font-size: 0.875rem;
      color: #64748b;
      font-weight: 500;
    }

    .detail-value {
      font-size: 0.875rem;
      color: #0f172a;
      font-weight: 500;
    }

    .order-total {
      font-size: 1rem;
      font-weight: 600;
      color: #0f172a;
    }

    /* Status Badges */
    .status-badge {
      display: inline-block;
      padding: 0.375rem 0.75rem;
      border-radius: 20px;
      font-size: 0.75rem;
      font-weight: 600;
      text-transform: capitalize;
    }

    .status-pending {
      background: #fef3c7;
      color: #92400e;
    }

    .status-processing {
      background: #dbeafe;
      color: #1e40af;
    }

    .status-shipped {
      background: #e0e7ff;
      color: #3730a3;
    }

    .status-out-for-delivery {
      background: #fde68a;
      color: #78350f;
    }

    .status-delivered {
      background: #d1fae5;
      color: #065f46;
    }

    .status-cancelled {
      background: #fee2e2;
      color: #991b1b;
    }

    .status-returned {
      background: #f3e8ff;
      color: #6b21a8;
    }

    .status-return-pending {
      background: #fef3c7;
      color: #92400e;
    }

    .status-payment-failed {
      background: #fee2e2;
      color: #991b1b;
    }

    /* Order Actions */
    .order-actions {
      display: flex;
      gap: 0.75rem;
      margin-top: 1rem;
      padding-top: 1rem;
      border-top: 1px solid #e2e8f0;
      flex-wrap: wrap;
    }

    .action-btn {
      padding: 0.5rem 1rem;
      border: none;
      border-radius: 8px;
      font-size: 0.75rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      gap: 0.25rem;
    }

    .cancel-btn {
      background: #ef4444;
      color: #ffffff;
    }

    .cancel-btn:hover {
      background: #dc2626;
      transform: translateY(-1px);
    }

    .return-btn {
      background: #f59e0b;
      color: #ffffff;
    }

    .return-btn:hover {
      background: #d97706;
      transform: translateY(-1px);
    }

    .retry-payment-btn {
      background: #10b981;
      color: #ffffff;
    }

    .retry-payment-btn:hover {
      background: #059669;
      transform: translateY(-1px);
    }

    .action-btn:disabled {
      background: #d1d5db;
      cursor: not-allowed;
      transform: none;
    }

    /* Empty State */
    .empty-orders {
      text-align: center;
      padding: 4rem 2rem;
      background: #ffffff;
      border: 1px solid #e2e8f0;
      border-radius: 16px;
      box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
    }

    .empty-orders i {
      font-size: 4rem;
      margin-bottom: 1rem;
      color: #cbd5e1;
    }

    .empty-orders p {
      font-size: 1.125rem;
      color: #64748b;
      margin-bottom: 1.5rem;
    }

    .empty-orders a {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.75rem 1.5rem;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: #ffffff;
      text-decoration: none;
      border-radius: 12px;
      font-weight: 500;
      transition: all 0.3s ease;
    }

    .empty-orders a:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 15px -3px rgba(102, 126, 234, 0.4);
      color: #ffffff;
    }

    /* Pagination */
    .pagination-wrapper {
      display: flex;
      justify-content: center;
      margin-top: 2rem;
    }

    .pagination {
      display: flex;
      gap: 0.5rem;
      list-style: none;
      margin: 0;
      padding: 0;
    }

    .pagination a,
    .pagination span {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 40px;
      height: 40px;
      border: 1px solid #e2e8f0;
      border-radius: 8px;
      text-decoration: none;
      color: #64748b;
      font-weight: 500;
      transition: all 0.3s ease;
    }

    .pagination a:hover {
      background: #f8fafc;
      border-color: #6366f1;
      color: #6366f1;
    }

    .pagination .active {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: #ffffff;
      border-color: transparent;
    }

    /* Alerts */
    .alert {
      border-radius: 12px;
      border: none;
      padding: 1rem 1.5rem;
      margin-bottom: 1.5rem;
      font-weight: 500;
    }

    .alert-success {
      background: #d1fae5;
      color: #065f46;
    }

    .alert-danger {
      background: #fee2e2;
      color: #991b1b;
    }

    /* Modal Styling */
    .modal-content {
      border-radius: 16px;
      border: none;
      box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    }

    .modal-header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: #ffffff;
      border-radius: 16px 16px 0 0;
      border-bottom: none;
    }

    .modal-title {
      font-weight: 600;
    }

    .btn-close {
      filter: invert(1);
    }

    .modal-body {
      padding: 1.5rem;
    }

    .modal-footer {
      border-top: 1px solid #e2e8f0;
      padding: 1rem 1.5rem;
    }

    .form-control {
      border-radius: 8px;
      border: 1px solid #e2e8f0;
      padding: 0.75rem;
      transition: all 0.3s ease;
    }

    .form-control:focus {
      border-color: #6366f1;
      box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
    }

    .btn-primary {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      border: none;
      border-radius: 8px;
      padding: 0.5rem 1rem;
      font-weight: 500;
    }

    .btn-secondary {
      background: #6b7280;
      border: none;
      border-radius: 8px;
      padding: 0.5rem 1rem;
      font-weight: 500;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      body {
        margin-left: 0;
      }

      .orders-container {
        padding: 1rem;
      }

      .orders-grid {
        grid-template-columns: 1fr;
      }

      .search-form {
        flex-direction: column;
        gap: 1rem;
      }

      .page-title {
        font-size: 1.875rem;
      }

      .order-card {
        padding: 1rem;
      }

      .order-actions {
        flex-direction: column;
      }
    }
  </style>
</head>
<body>
  <%- include('./partials/sidebar') %>

  <div class="orders-container">
    <!-- Page Header -->
    <div class="page-header">
      <h1 class="page-title">My Orders</h1>
      <p class="page-subtitle">Track and manage your order history</p>
    </div>

    <!-- Search Section -->
    <div class="search-section">
      <form action="/profile/orders" method="GET" class="search-form">
        <input type="text" name="search" class="search-input" placeholder="Search orders by ID..." value="<%= query %>">
        <button type="submit" class="search-btn">
          <i class="fas fa-search"></i>
          Search
        </button>
      </form>
    </div>

    <!-- Alerts -->
    <% if (messages.error) { %>
      <div class="alert alert-danger">
        <i class="fas fa-exclamation-circle"></i>
        <%= messages.error %>
      </div>
    <% } %>
    <% if (messages.success) { %>
      <div class="alert alert-success">
        <i class="fas fa-check-circle"></i>
        <%= messages.success %>
      </div>
    <% } %>

    <!-- Orders Content -->
    <% if (orders.length > 0) { %>
      <div class="orders-grid">
        <% orders.forEach(order => { %>
          <div class="order-card" onclick="window.location.href='/order/<%= order._id %>'">
            <div class="order-header">
              <h2 class="order-id">Order #<%= order.orderID %></h2>
              <span class="order-date"><%= order.orderDate.toLocaleDateString() %></span>
            </div>

            <div class="order-details">
              <div class="detail-row">
                <span class="detail-label">Status</span>
                <span class="status-badge status-<%= order.orderStatus.toLowerCase().replace(' ', '-') %>">
                  <%= order.orderStatus %>
                </span>
              </div>
              <div class="detail-row">
                <span class="detail-label">Payment Method</span>
                <span class="detail-value"><%= order.paymentMethod %></span>
              </div>
              <div class="detail-row">
                <span class="detail-label">Payment Status</span>
                <span class="status-badge status-<%= order.paymentStatus.toLowerCase().replace(' ', '-') %>">
                  <%= order.paymentStatus %>
                </span>
              </div>
              <div class="detail-row">
                <span class="detail-label">Total Amount</span>
                <span class="detail-value order-total">₹<%= order.finalAmount ? order.finalAmount.toFixed(2) : '0.00' %></span>
              </div>
            </div>

            <div class="order-actions" onclick="event.stopPropagation()">
              <% if (['pending', 'processing'].includes(order.orderStatus)) { %>
                <button class="action-btn cancel-btn" data-order-id="<%= order._id %>" data-bs-toggle="modal" data-bs-target="#cancelOrderModal">
                  <i class="fas fa-times"></i>
                  Cancel Order
                </button>
              <% } else if (order.orderStatus === 'delivered' && !order.products.some(item => ['return pending', 'returned'].includes(item.status))) { %>
                <button class="action-btn return-btn" data-order-id="<%= order._id %>" data-bs-toggle="modal" data-bs-target="#returnOrderModal">
                  <i class="fas fa-undo"></i>
                  Return Order
                </button>
              <% } %>
              
              <% 
              const isOnlinePaymentPendingOrFailed = (order.paymentMethod && 
                (order.paymentMethod.toLowerCase() === 'online' || order.paymentMethod === 'Online') && 
                (order.paymentStatus === 'pending' || order.paymentStatus === 'failed' || order.orderStatus === 'payment-failed'));
              %>
              
              <% if (isOnlinePaymentPendingOrFailed) { %>
                <button class="action-btn retry-payment-btn" data-order-id="<%= order._id %>" onclick="retryPayment('<%= order._id %>', <%= order.finalAmount %>)">
                  <i class="fas fa-credit-card"></i>
                  Retry Payment
                </button>
              <% } %>
            </div>
          </div>
        <% }) %>
      </div>
      
      <!-- Pagination -->
      <% if (totalPages > 1) { %>
        <div class="pagination-wrapper">
          <div class="pagination">
            <% for(let i = 1; i <= totalPages; i++) { %>
              <a href="/profile/orders?page=<%= i %><%= query ? '&search=' + query : '' %>" class="<%= currentPage === i ? 'active' : '' %>">
                <%= i %>
              </a>
            <% } %>
          </div>
        </div>
      <% } %>
    <% } else { %>
      <div class="empty-orders">
        <i class="fas fa-shopping-bag"></i>
        <p>No orders found</p>
        <a href="/products">
          <i class="fas fa-shopping-cart"></i>
          Start Shopping
        </a>
      </div>
    <% } %>
  </div>

  <!-- Cancel Order Modal -->
  <div class="modal fade" id="cancelOrderModal" tabindex="-1" aria-labelledby="cancelOrderModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
    
      <div class="modal-header">
        <h5 class="modal-title" id="cancelOrderModalLabel">Cancel Order</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <form id="cancelOrderForm" method="POST" novalidate>
        <input type="hidden" name="orderId" id="cancelOrderId">

        <div class="modal-body">
          <p>Are you sure you want to cancel this order?</p>

          <div class="mb-3">
            <label for="cancelReasonSelect" class="form-label">Reason for Cancellation</label>
            <select class="form-select" id="cancelReasonSelect" name="reason" onchange="handleCancelReason(this)">
              <option value="" selected disabled>Select a reason</option>
              <option value="Ordered by mistake">Ordered by mistake</option>
              <option value="Found a better price">Found a better price</option>
              <option value="Item not needed anymore">Item not needed anymore</option>
              <option value="Delivery time is too long">Delivery time is too long</option>
              <option value="Other">Other</option>
            </select>
          </div>

          <div class="mb-3" id="otherCancelReasonContainer" style="display: none;">
            <label for="otherCancelReason" class="form-label">Please specify your reason</label>
            <textarea class="form-control" id="otherCancelReason" name="otherReason" rows="4" maxlength="500" placeholder="Write your reason here..."></textarea>
          </div>
        </div>

        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn btn-primary">Confirm Cancellation</button>
        </div>
      </form>

    </div>
  </div>
</div>

  <!-- Return Order Modal -->
<div class="modal fade" id="returnOrderModal" tabindex="-1" aria-labelledby="returnOrderModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="returnOrderModalLabel">Request Return</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form id="returnOrderForm" method="POST" novalidate>
        <input type="hidden" name="orderId" id="returnOrderId">
        <div class="modal-body">
          <p>Please select a reason for returning this order:</p>
          <div class="mb-3">
            <label for="returnReasonSelect" class="form-label">Return Reason</label>
            <select class="form-select" id="returnReasonSelect" name="reason" onchange="handleReturnReason(this)" novalidate>
              <option value="" disabled selected>Select a reason</option>
              <option value="Wrong item">Wrong item delivered</option>
              <option value="Damaged">Damaged or defective product</option>
              <option value="Not needed">Don't need the product</option>
              <option value="Other">Other</option>
            </select>
          </div>

          <div class="mb-3" id="otherReturnReasonContainer" style="display: none;">
            <label for="otherReason" class="form-label">Other Reason (required)</label>
            <textarea class="form-control" id="otherReason" name="otherReason" rows="3" maxlength="500" placeholder="Specify your reason..."></textarea>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="submit" class="btn btn-primary">Submit Return Request</button>
        </div>
      </form>
    </div>
  </div>
</div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    const Toast = Swal.mixin({
      toast: true,
      position: 'top-end',
      showConfirmButton: false,
      timer: 3000,
      timerProgressBar: true,
      didOpen: (toast) => {
        toast.addEventListener('mouseenter', Swal.stopTimer);
        toast.addEventListener('mouseleave', Swal.resumeTimer);
      }
    });

    // Handle payment failure and redirect to failure page - NO BACKGROUND TOAST
    async function handlePaymentFailure(orderId, error) {
      try {
        console.log('Handling payment failure for order:', orderId, 'Error:', error);
        
        // Call the payment failure handler
        const response = await fetch('/order/payment-failed', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            orderId: orderId,
            error: error
          })
        });

        const result = await response.json();
        console.log('Payment failure handler response:', result);

        if (result.success) {
          // Redirect to failure page immediately
          if (result.redirectUrl) {
            window.location.href = result.redirectUrl;
          } else {
            window.location.href = `/order/failure/${orderId}`;
          }
        } else {
          Toast.fire({
            icon: 'error',
            title: 'Error recording payment failure',
            text: result.message || 'Please try again'
          });
        }
      } catch (error) {
        console.error('Error handling payment failure:', error);
        // Direct redirect without toast
        window.location.href = `/order/failure/${orderId}`;
      }
    }

    // Payment Retry Function
    async function retryPayment(orderId, amount) {
      try {
        console.log('Retrying payment for order:', orderId, 'Amount:', amount);
        
        // Show loading state
        Toast.fire({
          icon: 'info',
          title: 'Preparing payment...'
        });

        // Create new Razorpay order for retry
        const response = await fetch('/order/retry-payment', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ orderId, amount })
        });

        const result = await response.json();
        console.log('Retry payment response:', result);

        if (!result.success) {
          Toast.fire({
            icon: 'error',
            title: result.message || 'Failed to prepare payment retry'
          });
          return;
        }

        // Check if Razorpay is loaded
        if (typeof Razorpay === 'undefined') {
          Toast.fire({
            icon: 'error',
            title: 'Payment gateway not loaded. Please refresh and try again.'
          });
          return;
        }

        const options = {
          key: result.key_id,
          amount: result.amount,
          currency: result.currency,
          name: 'FitVibe',
          description: 'Order Payment Retry',
          order_id: result.razorpayOrderId,
          handler: async function (response) {
            try {
              console.log('Payment successful:', response);
              
              Toast.fire({
                icon: 'info',
                title: 'Verifying payment...'
              });
              
              const verifyResponse = await fetch('/order/verify-payment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  orderId: orderId,
                  razorpay_payment_id: response.razorpay_payment_id,
                  razorpay_order_id: response.razorpay_order_id,
                  razorpay_signature: response.razorpay_signature
                })
              });

              const verifyResult = await verifyResponse.json();
              console.log('Verification result:', verifyResult);
              
              if (verifyResult.success) {
                Toast.fire({
                  icon: 'success',
                  title: 'Payment successful! Refreshing orders...'
                });
                setTimeout(() => {
                  window.location.reload();
                }, 1500);
              } else {
                Toast.fire({
                  icon: 'error',
                  title: verifyResult.message || 'Payment verification failed'
                });
              }
            } catch (error) {
              console.error('Error verifying payment:', error);
              Toast.fire({
                icon: 'error',
                title: 'Error verifying payment. Please contact support.'
              });
            }
          },
          prefill: {
            name: result.user?.name || '',
            email: result.user?.email || '',
            contact: result.user?.phone || ''
          },
          theme: {
            color: '#667eea'
          },
          modal: {
            ondismiss: function() {
              console.log('Payment retry modal dismissed');
              Toast.fire({
                icon: 'info',
                title: 'Payment retry cancelled'
              });
            }
          }
        };

        console.log('Opening Razorpay for retry with options:', options);
        
        const rzp = new Razorpay(options);
        
        // Enhanced payment failure handling for retry attempts - NO BACKGROUND TOAST
        rzp.on('payment.failed', function (response) {
          console.error('Payment retry failed:', response);
          
          // Handle payment failure by calling the failure handler and redirecting immediately
          handlePaymentFailure(orderId, response.error);
        });
        
        rzp.open();
        
      } catch (error) {
        console.error('Error retrying payment:', error);
        Toast.fire({
          icon: 'error',
          title: 'Error preparing payment retry. Please try again.'
        });
      }
    }

    // Modal event handlers
    document.querySelectorAll('.cancel-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        document.querySelector('#cancelOrderId').value = btn.dataset.orderId;
      });
    });

    document.querySelectorAll('.return-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        document.querySelector('#returnOrderId').value = btn.dataset.orderId;
      });
    });

    // Form submission handlers
    ['cancelOrderForm', 'returnOrderForm'].forEach(formId => {
    const form = document.getElementById(formId);
    if (form) {
    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(form);
        const action = formId === 'cancelOrderForm' ? 'cancel' : 'return';

        // SweetAlert2 Toast setup
        const Toast = Swal.mixin({
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true
        });

        // Validate reason for cancel
        if (action === 'cancel' && !form.querySelector('#cancelReasonSelect').value.trim()) {
            Toast.fire({
                icon: 'error',
                title: 'Please select a reason for cancellation.'
            });
            return;
        }

        try {
            const response = await fetch(`/order/${action}/${formData.get('orderId')}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(Object.fromEntries(formData))
            });

            const result = await response.json();

            if (result.success) {
                Toast.fire({
                    icon: 'success',
                    title: `Order ${action}ed successfully!`
                });
                setTimeout(() => window.location.reload(), 1000); // reload after toast
            } else {
                Toast.fire({
                    icon: 'error',
                    title: `Failed to ${action} order: ${result.message}`
                });
            }
        } catch (error) {
            Toast.fire({
                icon: 'error',
                title: `Error ${action}ing order.`
            });
        }
    });
}

});

    // Handle reason selection for cancel/return forms
    function handleCancelReason(select) {
      const otherContainer = document.getElementById('otherCancelReasonContainer');
      const otherTextarea = document.getElementById('otherCancelReason');
      
      if (select.value === 'Other') {
        otherContainer.style.display = 'block';
        otherTextarea.required = true;
      } else {
        otherContainer.style.display = 'none';
        otherTextarea.required = false;
        otherTextarea.value = '';
      }
    }

    function handleReturnReason(select) {
      const otherContainer = document.getElementById('otherReturnReasonContainer');
      const otherTextarea = document.getElementById('otherReason');
      
      if (select.value === 'Other') {
        otherContainer.style.display = 'block';
        otherTextarea.required = true;
      } else {
        otherContainer.style.display = 'none';
        otherTextarea.required = false;
        otherTextarea.value = '';
      }
    }
  </script>
</body>
</html>