<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>FitVibe - Change Password</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
      min-height: 100vh;
      margin-left: 250px;
      transition: margin-left 0.3s ease;
    }

    .main-content {
      padding: 2rem;
      max-width: 800px;
      margin: 0 auto;
    }

    .page-header {
      background: #ffffff;
      border-radius: 16px;
      padding: 2rem;
      margin-bottom: 2rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      border-left: 4px solid #667eea;
    }

    .page-title {
      font-size: 2rem;
      font-weight: 700;
      color: #0f172a;
      margin-bottom: 0.5rem;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .page-subtitle {
      font-size: 0.875rem;
      color: #64748b;
      font-weight: 400;
    }

    .form-container {
      background: #ffffff;
      border-radius: 16px;
      padding: 2rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      border: 1px solid #e2e8f0;
    }

    .password-form {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }

    .form-group {
      position: relative;
    }

    .form-label {
      display: block;
      font-size: 0.875rem;
      font-weight: 600;
      color: #374151;
      margin-bottom: 0.5rem;
    }

    .form-input {
      width: 100%;
      padding: 1rem 1.25rem;
      font-size: 0.875rem;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      outline: none;
      transition: all 0.3s ease;
      background: #ffffff;
      color: #0f172a;
      font-weight: 500;
    }

    .form-input:focus {
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
      transform: translateY(-2px);
    }

    .form-input::placeholder {
      color: #94a3b8;
      font-weight: 400;
    }

    .password-toggle {
      position: absolute;
      right: 1rem;
      top: 50%;
      transform: translateY(-50%);
      color: #94a3b8;
      font-size: 1rem;
      cursor: pointer;
      transition: color 0.3s ease;
    }

    .password-toggle:hover {
      color: #667eea;
    }

    .change-btn {
      width: 100%;
      padding: 1rem 1.5rem;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: #ffffff;
      border: none;
      border-radius: 12px;
      font-size: 0.875rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      margin-top: 1rem;
    }

    .change-btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 12px 25px rgba(102, 126, 234, 0.4);
    }

    .change-btn:active {
      transform: translateY(-1px);
    }

    .change-btn:disabled {
      opacity: 0.7;
      cursor: not-allowed;
      transform: none;
    }

    .password-strength {
      margin-top: 0.5rem;
      font-size: 0.75rem;
      font-weight: 500;
    }

    .strength-weak { color: #ef4444; }
    .strength-medium { color: #f59e0b; }
    .strength-strong { color: #10b981; }

    .password-requirements {
      background: rgba(102, 126, 234, 0.05);
      border: 1px solid rgba(102, 126, 234, 0.1);
      border-radius: 8px;
      padding: 0.75rem;
      margin-top: 0.5rem;
    }

    .requirement {
      font-size: 0.75rem;
      color: #64748b;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      margin-bottom: 0.25rem;
    }

    .requirement:last-child {
      margin-bottom: 0;
    }

    .requirement.met {
      color: #10b981;
    }

    .requirement i {
      font-size: 0.625rem;
    }

    .error-message {
      color: #ef4444;
      font-size: 0.75rem;
      font-weight: 500;
      margin-top: 0.5rem;
      padding: 0.5rem 0.75rem;
      background: rgba(239, 68, 68, 0.1);
      border-radius: 8px;
      border-left: 3px solid #ef4444;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .success-message {
      color: #10b981;
      font-size: 0.75rem;
      font-weight: 500;
      margin-top: 0.5rem;
      padding: 0.5rem 0.75rem;
      background: rgba(16, 185, 129, 0.1);
      border-radius: 8px;
      border-left: 3px solid #10b981;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .security-tips {
      background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
      border: 1px solid rgba(102, 126, 234, 0.2);
      border-radius: 12px;
      padding: 1.5rem;
      margin-top: 2rem;
    }

    .security-tips h3 {
      font-size: 1rem;
      font-weight: 600;
      color: #0f172a;
      margin-bottom: 1rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .security-tips ul {
      list-style: none;
      padding: 0;
    }

    .security-tips li {
      font-size: 0.875rem;
      color: #64748b;
      margin-bottom: 0.5rem;
      display: flex;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .security-tips li i {
      color: #667eea;
      margin-top: 0.125rem;
      flex-shrink: 0;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      body {
        margin-left: 0;
      }

      .main-content {
        padding: 1rem;
      }

      .page-header,
      .form-container {
        padding: 1.5rem;
      }

      .page-title {
        font-size: 1.5rem;
      }
    }

    /* Animation */
    @keyframes slideUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .form-container {
      animation: slideUp 0.5s ease-out;
    }

    /* Loading state */
    .loading {
      opacity: 0.7;
      pointer-events: none;
    }

    .spinner {
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <%- include('./partials/sidebar') %>
  
  <div class="main-content">
    <!-- Page Header -->
    <div class="page-header">
      <h1 class="page-title">Change Password</h1>
      <p class="page-subtitle">Update your password to keep your account secure</p>
    </div>

    <!-- Form Container -->
    <div class="form-container">
      <form id="passwordForm" class="password-form">
        <div class="form-group">
          <label for="currentPassword" class="form-label">Current Password</label>
          <input 
            type="password" 
            name="currentPassword" 
            id="currentPassword"
            placeholder="Enter your current password" 
            class="form-input"
            required
          />
          <i class="fas fa-eye password-toggle" id="currentPasswordToggle" onclick="togglePassword('currentPassword', 'currentPasswordToggle')"></i>
        </div>

        <div class="form-group">
          <label for="newPassword" class="form-label">New Password</label>
          <input 
            type="password" 
            name="newPassword" 
            id="newPassword"
            placeholder="Enter your new password" 
            class="form-input"
            required
          />
          <i class="fas fa-eye password-toggle" id="newPasswordToggle" onclick="togglePassword('newPassword', 'newPasswordToggle')"></i>
          
          <div class="password-strength" id="passwordStrength"></div>
          
          <div class="password-requirements" id="passwordRequirements">
            <div class="requirement" id="lengthReq">
              <i class="fas fa-times"></i>
              At least 8 characters
            </div>
            <div class="requirement" id="upperReq">
              <i class="fas fa-times"></i>
              One uppercase letter
            </div>
            <div class="requirement" id="lowerReq">
              <i class="fas fa-times"></i>
              One lowercase letter
            </div>
            <div class="requirement" id="numberReq">
              <i class="fas fa-times"></i>
              One number
            </div>
          </div>
        </div>

        <div class="form-group">
          <label for="confirmPassword" class="form-label">Confirm New Password</label>
          <input 
            type="password" 
            name="confirmPassword" 
            id="confirmPassword"
            placeholder="Confirm your new password" 
            class="form-input"
            required
          />
          <i class="fas fa-eye password-toggle" id="confirmPasswordToggle" onclick="togglePassword('confirmPassword', 'confirmPasswordToggle')"></i>
        </div>

        <button type="submit" class="change-btn" id="changeBtn">
          <i class="fas fa-shield-alt"></i>
          Change Password
        </button>
      </form>
    </div>

    <!-- Security Tips -->
    <div class="security-tips">
      <h3>
        <i class="fas fa-lightbulb"></i>
        Password Security Tips
      </h3>
      <ul>
        <li>
          <i class="fas fa-check"></i>
          Use a combination of uppercase and lowercase letters, numbers, and symbols
        </li>
        <li>
          <i class="fas fa-check"></i>
          Avoid using personal information like names, birthdays, or addresses
        </li>
        <li>
          <i class="fas fa-check"></i>
          Don't reuse passwords from other accounts
        </li>
        <li>
          <i class="fas fa-check"></i>
          Consider using a password manager for better security
        </li>
      </ul>
    </div>
  </div>

  <script>
    const passwordForm = document.getElementById('passwordForm');
    const changeBtn = document.getElementById('changeBtn');
    const currentPasswordInput = document.getElementById('currentPassword');
    const newPasswordInput = document.getElementById('newPassword');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    const passwordStrength = document.getElementById('passwordStrength');

    // Password toggle functionality
    function togglePassword(inputId, toggleId) {
      const input = document.getElementById(inputId);
      const toggle = document.getElementById(toggleId);
      
      if (input.type === 'password') {
        input.type = 'text';
        toggle.classList.remove('fa-eye');
        toggle.classList.add('fa-eye-slash');
      } else {
        input.type = 'password';
        toggle.classList.remove('fa-eye-slash');
        toggle.classList.add('fa-eye');
      }
    }

    // Password strength checker
    function checkPasswordStrength(password) {
      let strength = 0;
      let feedback = "";

      // Check requirements
      const lengthReq = document.getElementById('lengthReq');
      const upperReq = document.getElementById('upperReq');
      const lowerReq = document.getElementById('lowerReq');
      const numberReq = document.getElementById('numberReq');

      // Length check
      if (password.length >= 8) {
        strength++;
        lengthReq.classList.add('met');
        lengthReq.querySelector('i').className = 'fas fa-check';
      } else {
        lengthReq.classList.remove('met');
        lengthReq.querySelector('i').className = 'fas fa-times';
      }

      // Uppercase check
      if (/[A-Z]/.test(password)) {
        strength++;
        upperReq.classList.add('met');
        upperReq.querySelector('i').className = 'fas fa-check';
      } else {
        upperReq.classList.remove('met');
        upperReq.querySelector('i').className = 'fas fa-times';
      }

      // Lowercase check
      if (/[a-z]/.test(password)) {
        strength++;
        lowerReq.classList.add('met');
        lowerReq.querySelector('i').className = 'fas fa-check';
      } else {
        lowerReq.classList.remove('met');
        lowerReq.querySelector('i').className = 'fas fa-times';
      }

      // Number check
      if (/[0-9]/.test(password)) {
        strength++;
        numberReq.classList.add('met');
        numberReq.querySelector('i').className = 'fas fa-check';
      } else {
        numberReq.classList.remove('met');
        numberReq.querySelector('i').className = 'fas fa-times';
      }

      // Set strength feedback
      switch (strength) {
        case 0:
        case 1:
          feedback = "Weak password";
          passwordStrength.className = "password-strength strength-weak";
          break;
        case 2:
        case 3:
          feedback = "Medium strength";
          passwordStrength.className = "password-strength strength-medium";
          break;
        case 4:
          feedback = "Strong password";
          passwordStrength.className = "password-strength strength-strong";
          break;
      }

      passwordStrength.textContent = password ? feedback : "";
      return strength >= 4;
    }

    // Real-time password validation
    newPasswordInput.addEventListener('input', function() {
      checkPasswordStrength(this.value);
      validatePasswordMatch();
    });

    confirmPasswordInput.addEventListener('input', validatePasswordMatch);

    function validatePasswordMatch() {
      const newPassword = newPasswordInput.value;
      const confirmPassword = confirmPasswordInput.value;
      
      // Remove existing error messages
      const existingMessages = confirmPasswordInput.parentNode.querySelectorAll('.error-message, .success-message');
      existingMessages.forEach(msg => msg.remove());
      
      if (confirmPassword && newPassword !== confirmPassword) {
        showMessage('error', 'Passwords do not match', confirmPasswordInput.parentNode);
      }
    }

    // Form submission
    passwordForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData);

      // Validate passwords match
      if (data.newPassword !== data.confirmPassword) {
        showMessage('error', 'New password and confirmation do not match', confirmPasswordInput.parentNode);
        return;
      }

      // Validate password strength
      if (!checkPasswordStrength(data.newPassword)) {
        showMessage('error', 'Please meet all password requirements', newPasswordInput.parentNode);
        return;
      }

      // Show loading state
      changeBtn.disabled = true;
      changeBtn.innerHTML = '<i class="fas fa-spinner spinner"></i> Changing Password...';

      try {
        const response = await fetch('/profile/change-password', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
          showMessage('success', 'Password changed successfully!', passwordForm);
          
          // Reset form after success
          setTimeout(() => {
            passwordForm.reset();
            window.location.href = '/user/account';
          }, 2000);
        } else {
          showMessage('error', result.message || 'Failed to change password', currentPasswordInput.parentNode);
        }
      } catch (error) {
        showMessage('error', 'Error changing password. Please try again.', passwordForm);
      } finally {
        // Reset button
        changeBtn.disabled = false;
        changeBtn.innerHTML = '<i class="fas fa-shield-alt"></i> Change Password';
      }
    });

    // Show message function
    function showMessage(type, message, container) {
      // Remove existing messages in container
      const existingMessages = container.querySelectorAll('.error-message, .success-message');
      existingMessages.forEach(msg => msg.remove());
      
      // Create new message
      const messageDiv = document.createElement('div');
      messageDiv.className = type === 'success' ? 'success-message' : 'error-message';
      messageDiv.innerHTML = `
        <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
        ${message}
      `;
      
      // Insert message
      container.appendChild(messageDiv);
      
      // Auto-remove after 5 seconds
      setTimeout(() => {
        if (messageDiv.parentNode) {
          messageDiv.remove();
        }
      }, 5000);
    }
  </script>
</body>
</html>