<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>FitVibe - Checkout</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
  <style>
    /* Inherit Global Styles */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    :root {
      --primary-color: #1a1a1a;
      --secondary-color: #ffd700;
      --accent-color: #e6c200;
      --text-light: #ffffff;
      --text-dark: #333333;
      --background-light: #f9f9f9;
      --card-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      --transition: all 0.3s ease;
    }

    body {
      font-family: 'Arial', sans-serif;
      line-height: 1.6;
      color: var(--text-dark);
      background-color: var(--background-light);
    }

    /* Checkout Section */
    .checkout-section {
      padding: 60px 20px;
      background: var(--background-light);
      display: flex;
      flex-wrap: wrap;
      gap: 40px;
      justify-content: center;
    }

    .checkout-address,
    .checkout-order {
      flex: 1;
      min-width: 300px;
      max-width: 500px;
    }

    .checkout-section h2 {
      font-size: 28px;
      margin-bottom: 20px;
      color: var(--text-dark);
      position: relative;
      display: inline-block;
    }

    .checkout-section h2::after {
      content: '';
      position: absolute;
      bottom: -10px;
      left: 50%;
      transform: translateX(-50%);
      width: 80px;
      height: 3px;
      background: var(--secondary-color);
    }

    /* Address Section */
    .address-list {
      display: flex;
      flex-direction: column;
      gap: 20px;
    }

    .address-card {
      background: white;
      padding: 15px;
      border-radius: 10px;
      box-shadow: var(--card-shadow);
      transition: var(--transition);
      border: 2px solid transparent;
    }

    .address-card.default {
      border-color: var(--secondary-color);
    }

    .address-card:hover {
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    }

    .address-card p {
      margin: 5px 0;
    }

    .address-actions {
      display: flex;
      gap: 10px;
      margin-top: 10px;
    }

    .address-actions button {
      padding: 8px 15px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: var(--transition);
    }

    .address-actions .set-default-btn {
      background: var(--primary-color);
      color: var(--text-light);
    }

    .address-actions .set-default-btn:hover {
      background: var(--secondary-color);
      color: var(--primary-color);
    }

    .address-actions .edit-btn {
      background: #3498db;
      color: var(--text-light);
    }

    .address-actions .edit-btn:hover {
      background: #2980b9;
    }

    .add-address-btn {
      margin-top: 20px;
      padding: 10px 20px;
      background: var(--secondary-color);
      color: var(--primary-color);
      border: none;
      border-radius: 25px;
      cursor: pointer;
      transition: var(--transition);
    }

    .add-address-btn:hover {
      background: var(--accent-color);
    }

    /* Address Form */
    .address-form {
      display: none;
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: var(--card-shadow);
      margin-top: 20px;
    }

    .address-form.active {
      display: block;
    }

    .address-form input {
      width: 100%;
      padding: 10px;
      margin: 10px 0;
      border: 1px solid #ccc;
      border-radius: 5px;
      outline: none;
    }

    .address-form button {
      padding: 10px 20px;
      background: var(--primary-color);
      color: var(--text-light);
      border: none;
      border-radius: 5px;
      cursor: pointer;
      transition: var(--transition);
    }

    .address-form button:hover {
      background: var(--secondary-color);
      color: var(--primary-color);
    }

    /* Order Summary */
    .order-items {
      display: flex;
      flex-direction: column;
      gap: 20px;
      margin-bottom: 20px;
    }

    .order-item {
      display: flex;
      align-items: center;
      background: white;
      padding: 15px;
      border-radius: 10px;
      box-shadow: var(--card-shadow);
    }

    .order-item img {
      width: 80px;
      height: 80px;
      object-fit: cover;
      border-radius: 8px;
      margin-right: 20px;
    }

    .order-item-details {
      flex: 1;
    }

    .order-item-details h3 {
      font-size: 18px;
      margin-bottom: 5px;
    }

    .order-item-details p {
      font-size: 14px;
      color: var(--text-dark);
    }

    .order-summary {
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: var(--card-shadow);
      text-align: right;
    }

    .order-summary p {
      margin: 10px 0;
      font-size: 16px;
    }

    .order-summary .total {
      font-size: 18px;
      font-weight: bold;
    }

    /* Payment Method Selection */
    .payment-methods {
      margin: 20px 0;
      text-align: left;
    }

    .payment-methods h3 {
      font-size: 18px;
      margin-bottom: 10px;
      color: var(--text-dark);
    }

    .payment-methods label {
      display: block;
      margin: 10px 0;
      font-size: 16px;
      cursor: pointer;
    }

    .payment-methods input[type="radio"] {
      margin-right: 10px;
    }

    .place-order-btn {
      margin-top: 20px;
      padding: 12px 25px;
      background: var(--secondary-color);
      color: var(--primary-color);
      border: none;
      border-radius: 25px;
      cursor: pointer;
      transition: var(--transition);
    }

    .place-order-btn:hover {
      background: var(--accent-color);
      transform: translateY(-3px);
    }

    .place-order-btn:disabled {
      background: #ccc;
      color: #666;
      cursor: not-allowed;
    }

    /* Responsive Styles */
    @media (max-width: 768px) {
      .checkout-section {
        flex-direction: column;
        align-items: center;
      }

      .checkout-address,
      .checkout-order {
        width: 100%;
        max-width: 100%;
      }

      .order-item {
        flex-direction: column;
        align-items: flex-start;
      }

      .order-item img {
        width: 100%;
        max-width: 120px;
        margin-bottom: 10px;
      }
    }

    @media (max-width: 480px) {
      .checkout-section h2 {
        font-size: 24px;
      }

      .order-item-details h3 {
        font-size: 16px;
      }

      .order-summary p {
        font-size: 14px;
      }
    }
  </style>
</head>

<body>
  <!-- Header Partial -->
  <%- include('./partials/header') %>

    <!-- Checkout Section -->
    <div class="checkout-section">
      <!-- Address Section -->
      <div class="checkout-address">
<h2>Shipping Address</h2>
<% if (addresses && addresses.length > 0) { %>
  <div class="address-list">
    <% addresses.forEach(address => { %>
      <script>console.log('Address ID:', '<%= address._id %>');</script>
      <div class="address-card <%= address.isDefault ? 'default' : '' %>">
        <input type="radio" name="address" value="<%= address._id %>" <%= address.isDefault ? 'checked' : '' %>>
        <p><strong><%= address.name %></strong></p>
        <p><%= address.address || 'N/A' %>, <%= address.city %>, <%= address.state %> <%= address.zipCode %></p>
        <p><%= address.country %></p>
        <p>Phone: <%= address.phone %></p>
        <div class="address-actions">
          <button class="set-default-btn" data-address-id="<%= address._id %>" <%= address.isDefault ? 'disabled' : '' %>>Set as Default</button>
          <button class="edit-btn" data-address-id="<%= address._id %>">Edit</button>
        </div>
      </div>
    <% }) %>
  </div>
<% } else { %>
  <p>No addresses found. Please add an address.</p>
<% } %>
              <button class="add-address-btn">Add New Address</button>
              <form class="address-form" id="addressForm" action="/profile/address/edit" method="POST">
                <input type="hidden" name="addressId" id="addressId">
                <input type="text" name="name" placeholder="Full Name" required>
                <input type="text" name="address" placeholder="Street Address" required>
                <input type="text" name="city" placeholder="City" required>
                <input type="text" name="state" placeholder="State" required>
                <input type="text" name="zipCode" placeholder="Zip Code" required>
                <input type="text" name="country" placeholder="Country" required>
                <input type="text" name="phone" placeholder="Phone Number" required>
                <button type="submit">Save Address</button>
              </form>

      </div>

      <!-- Order Summary Section -->
      <div class="checkout-order">
        <h2>Order Summary</h2>
        <% if (cart && cart.items.length> 0) { %>
          <div class="order-items">
            <% cart.items.forEach(item=> { %>
              <div class="order-item">
                <img
                  src="<%= item.productId && item.productId.images && item.productId.images.length > 0 ? item.productId.images[0].url : '/path/to/default-image.jpg' %>"
                  alt="<%= item.productId ? item.productId.name : 'Product' %>" loading="lazy" />
                <div class="order-item-details">
                  <h3>
                    <%= item.productId ? item.productId.name : 'Product Name' %>
                  </h3>
                  <p>Quantity: <%= item.quantity %>
                  </p>
                  <p>Item Total: ₹<%= item.productId && item.productId.variants && item.productId.variants[0] ?
                      (item.productId.variants[0].salePrice * item.quantity).toFixed(2) : '0.00' %>
                  </p>
                </div>
              </div>
              <% }) %>
          </div>
          <div class="order-summary">
            <p>Subtotal: ₹<%= subtotal.toFixed(2) %>
            </p>
            <% if (tax> 0) { %>
              <p>GST (5%): ₹<%= tax.toFixed(2) %>
              </p>
              <% } %>
                <% if (discount> 0) { %>
                  <p>Discount (10%): -₹<%= discount.toFixed(2) %>
                  </p>
                  <% } %>
                    <p>Shipping: ₹<%= shipping.toFixed(2) %>
                    </p>
                    <p class="total">Total: ₹<%= total.toFixed(2) %>
                    </p>
                    <!-- Payment Method Selection -->
                    <div class="payment-methods">
                      <h3>Select Payment Method</h3>
                      <label>
                        <input type="radio" name="paymentMethod" value="COD" checked>
                        Cash on Delivery
                      </label>
                      <label>
                        <input type="radio" name="address" value="Online">
                        Online Payment
                      </label>
                    </div>
                    <% const isOutOfStock=cart.items.some(item=>
                      item.productId &&
                      item.productId.variants &&
                      item.productId.variants.length > 0 &&
                      item.productId.variants[0].stock === 0
                      ); %>

                      <button class="place-order-btn" <%=!defaultAddress || isOutOfStock ? 'disabled' : '' %>
                        >Place Order</button>
          </div>
          <% } else { %>
            <p>Your cart is empty.</p>
            <% } %>
      </div>
    </div>

    <!-- Footer Partial -->
    <%- include('./partials/footer') %>

      <!-- JavaScript for Address and Order Interactions -->
      <script>
        document.querySelectorAll('.set-default-btn').forEach(button => {
          button.addEventListener('click', async () => {
            const addressId = button.getAttribute('data-address-id');

            try {
              const res = await fetch('/address/set-default', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ addressId })
              });

              const data = await res.json();
              if (data.success) {
                window.location.reload();
              } else {

              }
            } catch (err) {

            }
          });
        });

        // Toggle Address Form
        document.querySelector('.add-address-btn').addEventListener('click', () => {
          const form = document.getElementById('addressForm');
          form.classList.toggle('active');
          form.reset();
          document.getElementById('addressId').value = '';
        });

        // Edit Address
document.addEventListener("DOMContentLoaded", () => {
  document.querySelectorAll('.edit-btn').forEach(button => {
    button.addEventListener('click', async () => {
      const addressId = button.getAttribute('data-address-id');
      try {
        const response = await fetch(`/address/${addressId}`);
        const address = await response.json();
        const form = document.getElementById('addressForm');
        form.classList.add('active');
        form.querySelector('#addressId').value = address._id;
        form.querySelector('[name="name"]').value = address.name;
        form.querySelector('[name="address"]').value = address.address;
        form.querySelector('[name="city"]').value = address.city;
        form.querySelector('[name="state"]').value = address.state;
        form.querySelector('[name="zipCode"]').value = address.zipCode;
        form.querySelector('[name="country"]').value = address.country;
        form.querySelector('[name="phone"]').value = address.phone;
      } catch (err) {
        console.error('Error loading address:', err);
        alert('Failed to load address.');
      }
    });
  });
});    
        document.getElementById('addressForm').addEventListener('submit', async (e) => {
          e.preventDefault();
          const formData = new FormData(e.target);
          const data = Object.fromEntries(formData);
          try {
            const response = await fetch('/save-address', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(data)
            });
            if (response.ok) {
              window.location.reload();
            } else {
              alert('Failed to save address.');
            }
          } catch (error) {
            alert('Error saving address.');
          }
        });

        // Set Default Address
        document.querySelectorAll('.set-default-btn').forEach(button => {
          button.addEventListener('click', async () => {
            const addressId = button.getAttribute('data-address-id');
            try {
              const response = await fetch('/address/set-default', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ addressId })
              });
              if (response.ok) {
                window.location.reload();
              } else {
                alert('Failed to set default address.');
              }
            } catch (error) {
              alert('Error setting default address.');
            }
          });
        });

        // Place Order
        document.querySelector('.place-order-btn').addEventListener('click', async () => {
          const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
          const addressId = document.querySelector('input[name="address"]:checked')?.value;  

          try {
            if (!addressId) {
              alert('Please select a delivery address.');

              return;
            }

            if (paymentMethod === 'Online') {
              alert('Redirecting to payment gateway... (This is a placeholder)');
            }

            const response = await fetch('/order/place', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ paymentMethod, addressId })  
            });

            const result = await response.json();


            if (result.success) {
              window.location.href = `/order/success/${result.orderId}`;
            } else {
              alert(result.message || 'Failed to place order.');
            }

          } catch (error) {
            console.error('Error placing order:', error);
            alert('Error placing order.');
          }
        });

      </script>
</body>

</html>