<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>FitVibe - Checkout</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: #f8fafc;
      color: #1e293b;
      line-height: 1.6;
    }

    .checkout-section {
      max-width: 1400px;
      margin: 0 auto;
      padding: 4rem 1.5rem;
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 3rem;
      align-items: start;
    }

    .checkout-section h2 {
      font-size: 2rem;
      font-weight: 700;
      color: #0f172a;
      margin-bottom: 2rem;
      letter-spacing: -0.025em;
      position: relative;
    }

    .checkout-section h2::after {
      content: '';
      position: absolute;
      bottom: -0.5rem;
      left: 0;
      width: 60px;
      height: 4px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      border-radius: 2px;
    }

    .checkout-address {
      background: #ffffff;
      border: 1px solid #e2e8f0;
      border-radius: 20px;
      padding: 2rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      position: relative;
      overflow: hidden;
    }

    .checkout-address::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 4px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .address-list {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .address-card {
      background: #f8fafc;
      border: 2px solid #e2e8f0;
      border-radius: 16px;
      padding: 1.5rem;
      transition: all 0.3s ease;
      cursor: pointer;
      position: relative;
    }

    .address-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    }

    .address-card.default,
    .address-card:has(input:checked) {
      border-color: #667eea;
      background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
    }

    .address-card input[type="radio"] {
      position: absolute;
      top: 1rem;
      right: 1rem;
      width: 20px;
      height: 20px;
      accent-color: #667eea;
    }

    .address-card p {
      margin: 0.5rem 0;
      color: #64748b;
      font-size: 0.875rem;
    }

    .address-card p strong {
      color: #0f172a;
      font-weight: 600;
      font-size: 1rem;
    }

    .address-actions {
      display: flex;
      gap: 0.75rem;
      margin-top: 1rem;
    }

    .address-actions button {
      padding: 0.5rem 1rem;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 500;
      font-size: 0.875rem;
      transition: all 0.3s ease;
    }

    .set-default-btn {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: #ffffff;
      box-shadow: 0 4px 6px -1px rgba(102, 126, 234, 0.3);
    }

    .set-default-btn:hover:not(:disabled) {
      transform: translateY(-2px);
      box-shadow: 0 10px 15px -3px rgba(102, 126, 234, 0.4);
    }

    .set-default-btn:disabled {
      background: #9ca3af;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }

    .edit-btn {
      background: #ffffff;
      color: #6b7280;
      border: 2px solid #e5e7eb;
    }

    .edit-btn:hover {
      background: #f9fafb;
      border-color: #667eea;
      color: #667eea;
    }

    .add-address-btn {
      width: 100%;
      padding: 1rem 2rem;
      background: #ffffff;
      color: #667eea;
      border: 2px dashed #667eea;
      border-radius: 16px;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }

    .add-address-btn:hover {
      background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
      border-style: solid;
    }

    .address-form {
      display: none;
      background: #ffffff;
      border: 1px solid #e2e8f0;
      border-radius: 16px;
      padding: 2rem;
      margin-top: 1.5rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }

    .address-form.active {
      display: block;
      animation: fadeIn 0.3s ease-out;
    }

    .address-form input {
      width: 100%;
      padding: 0.875rem 1rem;
      margin: 0.5rem 0;
      border: 1px solid #d1d5db;
      border-radius: 8px;
      outline: none;
      background: #ffffff;
      color: #111827;
      font-size: 0.875rem;
      transition: all 0.2s ease;
    }

    .address-form input:focus {
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .address-form button {
      width: 100%;
      padding: 0.875rem 1.5rem;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: #ffffff;
      border: none;
      border-radius: 12px;
      cursor: pointer;
      font-weight: 600;
      transition: all 0.3s ease;
      box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
      margin-top: 1rem;
    }

    .address-form button:hover {
      transform: translateY(-2px);
      box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4);
    }

    .checkout-order {
      background: #ffffff;
      border: 1px solid #e2e8f0;
      border-radius: 20px;
      padding: 2rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      position: relative;
      overflow: hidden;
      height: fit-content;
      position: sticky;
      top: 2rem;
    }

    .checkout-order::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 4px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .order-items {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .order-item {
      display: flex;
      align-items: center;
      background: #f8fafc;
      padding: 1.5rem;
      border-radius: 16px;
      border: 1px solid #e2e8f0;
      transition: all 0.3s ease;
    }

    .order-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }

    .order-item img {
      width: 80px;
      height: 80px;
      object-fit: cover;
      border-radius: 12px;
      margin-right: 1.5rem;
      flex-shrink: 0;
    }

    .order-item-details {
      flex: 1;
    }

    .order-item-details h3 {
      font-size: 1.125rem;
      font-weight: 600;
      color: #0f172a;
      margin-bottom: 0.5rem;
      line-height: 1.4;
    }

    .order-item-details p {
      font-size: 0.875rem;
      color: #64748b;
      margin-bottom: 0.25rem;
    }

    .order-item-details .item-price {
      font-weight: 600;
      color: #059669;
      font-size: 1rem;
    }

    .order-summary {
      background: #f8fafc;
      padding: 1.5rem;
      border-radius: 16px;
      border: 1px solid #e2e8f0;
      margin-bottom: 2rem;
    }

    .order-summary p {
      display: flex;
      justify-content: space-between;
      margin: 0.75rem 0;
      font-size: 0.875rem;
      color: #64748b;
    }

    .order-summary .total {
      font-size: 1.25rem;
      font-weight: 700;
      color: #0f172a;
      border-top: 1px solid #e2e8f0;
      padding-top: 0.75rem;
      margin-top: 1rem;
    }

    .order-summary .discount {
      color: #059669;
    }

    .payment-methods {
      margin-bottom: 2rem;
    }

    .payment-methods h3 {
      font-size: 1.125rem;
      font-weight: 600;
      color: #0f172a;
      margin-bottom: 1rem;
    }

    .payment-methods label {
      display: flex;
      align-items: center;
      padding: 1rem;
      margin: 0.75rem 0;
      background: #f8fafc;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-weight: 500;
      color: #374151;
    }

    .payment-methods label:hover {
      border-color: #667eea;
      background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
    }

    .payment-methods label:has(input:checked) {
      border-color: #667eea;
      background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
      color: #667eea;
    }

    .payment-methods input[type="radio"] {
      margin-right: 0.75rem;
      width: 18px;
      height: 18px;
      accent-color: #667eea;
    }

    .payment-methods i {
      margin-left: auto;
      font-size: 1.25rem;
    }

    .place-order-btn {
      width: 100%;
      padding: 1rem 2rem;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: #ffffff;
      border: none;
      border-radius: 50px;
      cursor: pointer;
      font-weight: 600;
      font-size: 1.125rem;
      transition: all 0.3s ease;
      box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }

    .place-order-btn:hover:not(:disabled) {
      transform: translateY(-3px);
      box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4);
    }

    .place-order-btn:disabled {
      background: #9ca3af;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }

    .empty-cart {
      text-align: center;
      padding: 3rem 2rem;
      color: #64748b;
    }

    .empty-cart i {
      font-size: 4rem;
      color: #d1d5db;
      margin-bottom: 1rem;
    }

    .empty-cart p {
      font-size: 1.125rem;
      margin-bottom: 2rem;
    }

    .continue-shopping-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 1rem 2rem;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: #ffffff;
      text-decoration: none;
      border-radius: 50px;
      font-weight: 600;
      transition: all 0.3s ease;
      box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
    }

    .continue-shopping-btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4);
      color: #ffffff;
      text-decoration: none;
    }

    @media (max-width: 1024px) {
      .checkout-section {
        grid-template-columns: 1fr;
        gap: 2rem;
      }

      .checkout-order {
        position: static;
      }
    }

    @media (max-width: 768px) {
      .checkout-section {
        padding: 2rem 1rem;
      }

      .checkout-section h2 {
        font-size: 1.75rem;
      }

      .checkout-address,
      .checkout-order {
        padding: 1.5rem;
      }

      .order-item {
        flex-direction: column;
        align-items: flex-start;
        text-align: center;
      }

      .order-item img {
        width: 100%;
        max-width: 120px;
        margin-bottom: 1rem;
        margin-right: 0;
        align-self: center;
      }

      .address-actions {
        flex-direction: column;
      }

      .address-actions button {
        width: 100%;
      }
    }

    @media (max-width: 480px) {
      .checkout-section h2 {
        font-size: 1.5rem;
      }

      .order-item-details h3 {
        font-size: 1rem;
      }

      .place-order-btn {
        font-size: 1rem;
        padding: 0.875rem 1.5rem;
      }
    }

    .loading {
      opacity: 0.6;
      pointer-events: none;
    }

    .spinner {
      display: inline-block;
      width: 20px;
      height: 20px;
      border: 3px solid rgba(255, 255, 255, 0.3);
      border-radius: 50%;
      border-top-color: #fff;
      animation: spin 1s ease-in-out infinite;
    }

    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .fade-in {
      animation: fadeIn 0.5s ease-out;
    }
  </style>
</head>

<body>
  <%- include('./partials/header') %>

  <div class="checkout-section">
    <div class="checkout-address">
      <h2><i class="fas fa-map-marker-alt"></i> Shipping Address</h2>
      <% if (addresses && addresses.length > 0) { %>
        <div class="address-list">
          <% addresses.forEach(address => { %>
            <div class="address-card <%= address.isDefault ? 'default' : '' %>">
              <input type="radio" name="address" value="<%= address._id %>" <%= address.isDefault ? 'checked' : '' %>>
              <p><strong><%= address.name %></strong></p>
              <p><%= address.address || 'N/A' %>, <%= address.city %>, <%= address.state %> <%= address.zipCode %></p>
              <p><%= address.country %></p>
              <p><i class="fas fa-phone"></i> <%= address.phone %></p>
              <div class="address-actions">
                <button class="set-default-btn" data-address-id="<%= address._id %>" <%= address.isDefault ? 'disabled' : '' %>>
                  <i class="fas fa-star"></i>
                  <%= address.isDefault ? 'Default' : 'Set as Default' %>
                </button>
                <button class="edit-btn" data-address-id="<%= address._id %>">
                  <i class="fas fa-edit"></i>
                  Edit
                </button>
              </div>
            </div>
          <% }) %>
        </div>
      <% } else { %>
        <div class="empty-cart">
          <i class="fas fa-map-marker-alt"></i>
          <p>No addresses found. Please add an address.</p>
        </div>
      <% } %>
      
      <button class="add-address-btn">
        <i class="fas fa-plus"></i>
        Add New Address
      </button>
      
      <form class="address-form" id="addressForm" action="/profile/address/edit" method="POST">
        <input type="hidden" name="addressId" id="addressId">
        <input type="text" name="name" placeholder="Full Name" required>
        <input type="text" name="address" placeholder="Street Address" required>
        <input type="text" name="city" placeholder="City" required>
        <input type="text" name="state" placeholder="State" required>
        <input type="text" name="zipCode" placeholder="Zip Code" required>
        <input type="text" name="country" placeholder="Country" required>
        <input type="text" name="phone" placeholder="Phone Number" required>
        <button type="submit">
          <i class="fas fa-save"></i>
          Save Address
        </button>
      </form>
    </div>

    <div class="checkout-order">
      <h2><i class="fas fa-shopping-bag"></i> Order Summary</h2>
      <% if (cart && cart.items.length > 0) { %>
        <div class="order-items">
          <% cart.items.forEach(item => { %>
            <div class="order-item">
              <img src="<%= item.productId && item.productId.images && item.productId.images.length > 0 ? item.productId.images[0].url : '/images/default-product.jpg' %>" 
                   alt="<%= item.productId ? item.productId.name : 'Product' %>" loading="lazy" />
              <div class="order-item-details">
                <h3><%= item.productId ? item.productId.name : 'Product Name' %></h3>
                <p><strong>Quantity:</strong> <%= item.quantity %></p>
                <p><strong>Size:</strong> <%= item.variant?.size || 'N/A' %></p>
                <p class="item-price">₹<%= item.variant ? (item.variant.salePrice * item.quantity).toLocaleString('en-IN', { minimumFractionDigits: 2 }) : '0.00' %></p>
              </div>
            </div>
          <% }) %>
        </div>
        
        <div class="order-summary">
          <p><span>Subtotal:</span> <span>₹<%= subtotal.toLocaleString('en-IN', { minimumFractionDigits: 2 }) %></span></p>
          <% if (tax > 0) { %>
            <p><span>GST (5%):</span> <span>₹<%= tax.toLocaleString('en-IN', { minimumFractionDigits: 2 }) %></span></p>
          <% } %>
          <% if (discount > 0) { %>
            <p class="discount"><span>Discount (10%):</span> <span>-₹<%= discount.toLocaleString('en-IN', { minimumFractionDigits: 2 }) %></span></p>
          <% } %>
          <p><span>Shipping:</span> <span>₹<%= shipping.toLocaleString('en-IN', { minimumFractionDigits: 2 }) %></span></p>
          <p class="total"><span>Total:</span> <span>��<%= total.toLocaleString('en-IN', { minimumFractionDigits: 2 }) %></span></p>
        </div>

        <div class="payment-methods">
          <h3>Select Payment Method</h3>
          <label>
            <input type="radio" name="paymentMethod" value="COD" checked>
            <span>Cash on Delivery</span>
            <i class="fas fa-money-bill-wave"></i>
          </label>
          <label>
            <input type="radio" name="paymentMethod" value="Online">
            <span>Online Payment</span>
            <i class="fas fa-credit-card"></i>
          </label>
        </div>

        <% const isOutOfStock = cart.items.some(item => 
          item.productId && 
          item.productId.variants && 
          item.variant && 
          item.variant.varientquatity < item.quantity
        ); %>

        <% const hasSelectedAddress = addresses && addresses.length > 0; %>

        <button class="place-order-btn" <%= !hasSelectedAddress || isOutOfStock ? 'disabled' : '' %>>
          <i class="fas fa-check-circle"></i>
          Place Order
        </button>
      <% } else { %>
        <div class="empty-cart">
          <i class="fas fa-shopping-cart"></i>
          <p>Your cart is empty.</p>
          <a href="/products" class="continue-shopping-btn">
            <i class="fas fa-shopping-bag"></i>
            Continue Shopping
          </a>
        </div>
      <% } %>
    </div>
  </div>

  <%- include('./partials/footer') %>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    const Toast = Swal.mixin({
      toast: true,
      position: 'top-end',
      showConfirmButton: false,
      timer: 3000,
      timerProgressBar: true,
      didOpen: (toast) => {
        toast.addEventListener('mouseenter', Swal.stopTimer);
        toast.addEventListener('mouseleave', Swal.resumeTimer);
      }
    });

    // Set Default Address
    document.querySelectorAll('.set-default-btn').forEach(button => {
      button.addEventListener('click', async () => {
        const addressId = button.getAttribute('data-address-id');
        
        button.disabled = true;
        button.innerHTML = '<span class="spinner"></span> Setting...';

        try {
          const res = await fetch('/address/set-default', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ addressId })
          });

          const data = await res.json();
          if (data.success) {
            Toast.fire({
              icon: 'success',
              title: 'Default address updated successfully!'
            });
            setTimeout(() => {
              window.location.reload();
            }, 1000);
          } else {
            Toast.fire({
              icon: 'error',
              title: 'Failed to set default address'
            });
            button.disabled = false;
            button.innerHTML = '<i class="fas fa-star"></i> Set as Default';
          }
        } catch (err) {
          Toast.fire({
            icon: 'error',
            title: 'Error setting default address'
          });
          button.disabled = false;
          button.innerHTML = '<i class="fas fa-star"></i> Set as Default';
        }
      });
    });

    // Toggle Address Form
    document.querySelector('.add-address-btn').addEventListener('click', () => {
      const form = document.getElementById('addressForm');
      form.classList.toggle('active');
      if (form.classList.contains('active')) {
        form.reset();
        document.getElementById('addressId').value = '';
        form.scrollIntoView({ behavior: 'smooth' });
      }
    });

    // Edit Address
    document.addEventListener('DOMContentLoaded', () => {
      document.querySelectorAll('.edit-btn').forEach(button => {
        button.addEventListener('click', async () => {
          const addressId = button.getAttribute('data-address-id');
          
          button.disabled = true;
          button.innerHTML = '<span class="spinner"></span> Loading...';
          
          try {
            const response = await fetch(`/address/${addressId}`);
            const address = await response.json();
            const form = document.getElementById('addressForm');
            
            form.classList.add('active');
            form.querySelector('#addressId').value = address._id;
            form.querySelector('[name="name"]').value = address.name;
            form.querySelector('[name="address"]').value = address.address;
            form.querySelector('[name="city"]').value = address.city;
            form.querySelector('[name="state"]').value = address.state;
            form.querySelector('[name="zipCode"]').value = address.zipCode;
            form.querySelector('[name="country"]').value = address.country;
            form.querySelector('[name="phone"]').value = address.phone;
            
            form.scrollIntoView({ behavior: 'smooth' });
            
            button.disabled = false;
            button.innerHTML = '<i class="fas fa-edit"></i> Edit';
          } catch (err) {
            console.error('Error loading address:', err);
            Toast.fire({
              icon: 'error',
              title: 'Failed to load address'
            });
            button.disabled = false;
            button.innerHTML = '<i class="fas fa-edit"></i> Edit';
          }
        });
      });
    });

    // Save Address
    document.getElementById('addressForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData);
      
      const submitBtn = e.target.querySelector('button[type="submit"]');
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<span class="spinner"></span> Saving...';
      
      try {
        const response = await fetch('/save-address', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
        
        if (response.ok) {
          Toast.fire({
            icon: 'success',
            title: 'Address saved successfully!'
          });
          setTimeout(() => {
            window.location.reload();
          }, 1000);
        } else {
          Toast.fire({
            icon: 'error',
            title: 'Failed to save address'
          });
          submitBtn.disabled = false;
          submitBtn.innerHTML = '<i class="fas fa-save"></i> Save Address';
        }
      } catch (error) {
        Toast.fire({
          icon: 'error',
          title: 'Error saving address'
        });
        submitBtn.disabled = false;
        submitBtn.innerHTML = '<i class="fas fa-save"></i> Save Address';
      }
    });

    // Handle address selection
    document.querySelectorAll('input[name="address"]').forEach(radio => {
      radio.addEventListener('change', () => {
        document.querySelectorAll('.address-card').forEach(card => {
          card.classList.remove('default');
        });
        
        const selectedCard = radio.closest('.address-card');
        if (selectedCard) {
          selectedCard.classList.add('default');
        }
        
        const placeOrderBtn = document.querySelector('.place-order-btn');
        if (placeOrderBtn) {
          placeOrderBtn.disabled = false;
        }
      });
    });

    // Place Order - FIXED VERSION
    document.querySelector('.place-order-btn').addEventListener('click', async () => {
      const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
      const addressId = document.querySelector('input[name="address"]:checked')?.value;
      
      if (!addressId) {
        Toast.fire({
          icon: 'warning',
          title: 'Please select a delivery address'
        });
        return;
      }

      const placeOrderBtn = document.querySelector('.place-order-btn');
      placeOrderBtn.disabled = true;
      placeOrderBtn.innerHTML = '<span class="spinner"></span> Placing Order...';

      try {
        console.log('Placing order with:', { paymentMethod, addressId });
        
        const response = await fetch('/order/place', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ paymentMethod, addressId })
        });

        const result = await response.json();
        console.log('Order response:', result);

        if (!result.success) {
          Toast.fire({
            icon: 'error',
            title: result.message || 'Failed to place order'
          });
          placeOrderBtn.disabled = false;
          placeOrderBtn.innerHTML = '<i class="fas fa-check-circle"></i> Place Order';
          return;
        }

        if (paymentMethod === 'Online') {
          // Check if Razorpay is loaded
          if (typeof Razorpay === 'undefined') {
            Toast.fire({
              icon: 'error',
              title: 'Payment gateway not loaded. Please refresh and try again.'
            });
            placeOrderBtn.disabled = false;
            placeOrderBtn.innerHTML = '<i class="fas fa-check-circle"></i> Place Order';
            return;
          }

          console.log('Initializing Razorpay with:', {
            key: result.key_id,
            amount: result.amount,
            currency: result.currency,
            order_id: result.razorpayOrderId
          });

          const options = {
            key: result.key_id,
            amount: result.amount,
            currency: result.currency,
            name: 'FitVibe',
            description: 'Order Payment',
            order_id: result.razorpayOrderId,
            handler: async function (response) {
              try {
                console.log('Payment successful:', response);
                
                // Show loading state
                Toast.fire({
                  icon: 'info',
                  title: 'Verifying payment...'
                });
                
                const verifyResponse = await fetch('/order/verify-payment', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    orderId: result.orderId,
                    razorpay_payment_id: response.razorpay_payment_id,
                    razorpay_order_id: response.razorpay_order_id,
                    razorpay_signature: response.razorpay_signature
                  })
                });

                const verifyResult = await verifyResponse.json();
                console.log('Verification result:', verifyResult);
                
                if (verifyResult.success) {
                  Toast.fire({
                    icon: 'success',
                    title: 'Payment successful! Redirecting...'
                  });
                  setTimeout(() => {
                    window.location.href = `/order/success/${result.orderId}`;
                  }, 1500);
                } else {
                  Toast.fire({
                    icon: 'error',
                    title: verifyResult.message || 'Payment verification failed'
                  });
                  placeOrderBtn.disabled = false;
                  placeOrderBtn.innerHTML = '<i class="fas fa-check-circle"></i> Place Order';
                }
              } catch (error) {
                console.error('Error verifying payment:', error);
                Toast.fire({
                  icon: 'error',
                  title: 'Error verifying payment. Please contact support.'
                });
                placeOrderBtn.disabled = false;
                placeOrderBtn.innerHTML = '<i class="fas fa-check-circle"></i> Place Order';
              }
            },
            prefill: {
              name: result.user?.name || '',
              email: result.user?.email || '',
              contact: result.user?.phone || ''
            },
            theme: {
              color: '#667eea'
            },
            modal: {
              ondismiss: function() {
                console.log('Payment modal dismissed');
                Toast.fire({
                  icon: 'info',
                  title: 'Payment cancelled'
                });
                placeOrderBtn.disabled = false;
                placeOrderBtn.innerHTML = '<i class="fas fa-check-circle"></i> Place Order';
              }
            }
          };

          console.log('Opening Razorpay with options:', options);
          
          const rzp = new Razorpay(options);
          
          rzp.on('payment.failed', function (response) {
            console.error('Payment failed:', response);
            Toast.fire({
              icon: 'error',
              title: 'Payment failed: ' + (response.error?.description || 'Unknown error')
            });
            placeOrderBtn.disabled = false;
            placeOrderBtn.innerHTML = '<i class="fas fa-check-circle"></i> Place Order';
          });

          // Reset button state before opening modal
          placeOrderBtn.disabled = false;
          placeOrderBtn.innerHTML = '<i class="fas fa-check-circle"></i> Place Order';
          
          rzp.open();
        } else {
          // COD order
          Toast.fire({
            icon: 'success',
            title: 'Order placed successfully!'
          });
          setTimeout(() => {
            window.location.href = `/order/success/${result.orderId}`;
          }, 1000);
        }
      } catch (error) {
        console.error('Error placing order:', error);
        Toast.fire({
          icon: 'error',
          title: 'Error placing order. Please try again.'
        });
        placeOrderBtn.disabled = false;
        placeOrderBtn.innerHTML = '<i class="fas fa-check-circle"></i> Place Order';
      }
    });

    // Add fade-in animation on page load
    document.addEventListener('DOMContentLoaded', () => {
      const elements = document.querySelectorAll('.checkout-address, .checkout-order');
      elements.forEach((el, index) => {
        setTimeout(() => {
          el.classList.add('fade-in');
        }, index * 200);
      });
    });
  </script>
</body>

</html>