<%- include('./partials/header', { pageTitle: 'Return Requests' }) %>

<%- include('./partials/sidebar', { page: 'orders' }) %>

<div class="main-content">
    <!-- Top Header -->
    <header class="top-header">
        <div class="header-content">
            <div class="header-left">
                <button class="sidebar-toggle" onclick="toggleSidebar()">
                    <i class="fas fa-bars"></i>
                </button>
                <div>
                    <h1 class="page-title">Return Requests</h1>
                    <div class="breadcrumbs">
                        <a href="/admin/dashboard">Dashboard</a>
                        <span class="breadcrumb-separator">/</span>
                        <a href="/admin/orders">Orders</a>
                        <span class="breadcrumb-separator">/</span>
                        <span>Return Requests</span>
                    </div>
                </div>
            </div>
            <div class="header-right">
                <div class="admin-profile">
                    <div class="admin-avatar">
                        A
                    </div>
                    <div class="admin-info">
                        <div class="admin-name">Admin</div>
                        <div class="admin-role">Administrator</div>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Content Area -->
    <div class="content-area">
        <!-- Alert Messages -->
        <% if (error_msg && error_msg.length > 0) { %>
            <div class="alert alert-danger alert-dismissible fade show alert-modern" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i>
                <% error_msg.forEach(function(msg) { %>
                    <div><%= msg %></div>
                <% }) %>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        <% } %>

        <% if (success_msg && success_msg.length > 0) { %>
            <div class="alert alert-success alert-dismissible fade show alert-modern" role="alert">
                <i class="fas fa-check-circle me-2"></i>
                <% success_msg.forEach(function(msg) { %>
                    <div><%= msg %></div>
                <% }) %>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        <% } %>

        <!-- Back to Orders Button -->
        <div class="back-to-orders-section">
            <a href="/admin/orders" class="btn-back-to-orders">
                <i class="fas fa-arrow-left"></i>
                Back to Orders
            </a>
        </div>

        <!-- Stats Overview -->
        <div class="stats-overview">
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-undo-alt"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">
                        <%= returnRequests ? returnRequests.length : 0 %>
                    </div>
                    <div class="stat-label">Pending Return Requests</div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-clock"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">
                        <% if (returnRequests && returnRequests.length > 0) { %>
                            <% const todayRequests = returnRequests.filter(order => {
                                const today = new Date();
                                const orderDate = new Date(order.orderDate);
                                return orderDate.toDateString() === today.toDateString();
                            }); %>
                            <%= todayRequests.length %>
                        <% } else { %>
                            0
                        <% } %>
                    </div>
                    <div class="stat-label">Today's Requests</div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-rupee-sign"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">
                        <% if (returnRequests && returnRequests.length > 0) { %>
                            <% 
                            let totalReturnValue = 0;
                            returnRequests.forEach(order => {
                                // Calculate balance amount only (no shipping charge)
                                let orderSubtotal = 0;
                                order.products.forEach(item => {
                                    orderSubtotal += (item.variant.salePrice * item.quantity);
                                });
                                
                                let totalCouponDiscount = 0;
                                if (order.couponDiscount && order.couponDiscount > 0) {
                                    totalCouponDiscount = order.couponDiscount;
                                } else if (order.coupon && order.coupon.discountAmount && order.coupon.discountAmount > 0) {
                                    totalCouponDiscount = order.coupon.discountAmount;
                                }
                                
                                // Calculate balance amount for return pending products only
                                const pendingReturnProducts = order.products.filter(p => p.status === 'return pending');
                                let actualReturnAmount = 0;
                                
                                pendingReturnProducts.forEach(product => {
                                    const itemSubtotal = product.variant.salePrice * product.quantity;
                                    let itemCouponDiscount = 0;
                                    if (totalCouponDiscount > 0 && orderSubtotal > 0) {
                                        itemCouponDiscount = (itemSubtotal / orderSubtotal) * totalCouponDiscount;
                                    }
                                    const itemFinalAmount = itemSubtotal - itemCouponDiscount;
                                    actualReturnAmount += itemFinalAmount;
                                });
                                
                                totalReturnValue += actualReturnAmount;
                            });
                            %>
                            ₹<%= totalReturnValue.toFixed(0) %>
                        <% } else { %>
                            ₹0
                        <% } %>
                    </div>
                    <div class="stat-label">Total Return Value</div>
                </div>
            </div>
        </div>

        <!-- Return Requests Table -->
        <% if (returnRequests && returnRequests.length > 0) { %>
            <div class="return-requests-table-card">
                <div class="table-header">
                    <h3 class="table-title">
                        <i class="fas fa-list"></i>
                        Pending Return Requests
                    </h3>
                </div>
                <div class="table-container">
                    <table class="return-requests-table">
                        <thead>
                            <tr>
                                <th>Order ID</th>
                                <th>Date Requested</th>
                                <th>Customer</th>
                                <th>Products</th>
                                <th>Return Amount</th>
                                <th>Reason</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% returnRequests.forEach(order => { %>
                                <tr class="return-request-row">
                                    <td>
                                        <div class="order-id">#<%= order.orderID %></div>
                                        <div class="order-date">
                                            <%= order.orderDate.toLocaleDateString('en-IN', { 
                                                year: 'numeric', 
                                                month: 'short', 
                                                day: 'numeric' 
                                            }) %>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="request-date">
                                            <% 
                                            // Find the most recent return pending status in history
                                            const returnPendingHistory = order.statusHistory.filter(h => h.status === 'return pending').pop();
                                            const requestDate = returnPendingHistory ? returnPendingHistory.date : order.orderDate;
                                            %>
                                            <%= new Date(requestDate).toLocaleDateString('en-IN', { 
                                                year: 'numeric', 
                                                month: 'short', 
                                                day: 'numeric' 
                                            }) %>
                                        </div>
                                        <div class="request-time">
                                            <%= new Date(requestDate).toLocaleTimeString('en-IN', { 
                                                hour: '2-digit', 
                                                minute: '2-digit' 
                                            }) %>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="customer-info">
                                            <div class="customer-avatar">
                                                <%= order.user.name.charAt(0).toUpperCase() %>
                                            </div>
                                            <div class="customer-details">
                                                <div class="customer-name"><%= order.user.name %></div>
                                                <div class="customer-email"><%= order.user.email %></div>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="products-info">
                                            <% const productsToReturn = order.products.filter(p => p.status === 'return pending'); %>
                                            <% if (productsToReturn.length > 0) { %>
                                                <% productsToReturn.slice(0, 2).forEach(product => { %>
                                                    <div class="product-item">
                                                        <span class="product-name"><%= product.product.name %></span>
                                                        <span class="product-variant">Size: <%= product.variant.size %> | Qty: <%= product.quantity %></span>
                                                    </div>
                                                <% }) %>
                                                <% if (productsToReturn.length > 2) { %>
                                                    <div class="more-products">
                                                        +<%= productsToReturn.length - 2 %> more items
                                                    </div>
                                                <% } %>
                                            <% } else { %>
                                                <div class="product-item">
                                                    <span class="product-name">All products</span>
                                                    <span class="product-variant"><%= order.products.length %> items</span>
                                                </div>
                                            <% } %>
                                        </div>
                                    </td>
                                    <td>
                                        <% 
                                        // Get items for return
                                        const itemsForReturn = order.products.filter(p => p.status === 'return pending');
                                        const isFullOrderReturn = itemsForReturn.length === order.products.length;
                                        
                                        // Calculate total refund amount for display
                                        let totalRefundAmount = 0;
                                        
                                        // Debug: Log order properties
                                        console.log('Order ID:', order.orderID);
                                        console.log('Is Full Order Return:', isFullOrderReturn);
                                        console.log('Backend calculated values:', {
                                            totalBalanceAmount: order.totalBalanceAmount,
                                            totalShippingRefund: order.totalShippingRefund,
                                            totalReturnAmount: order.totalReturnAmount,
                                            isFullOrderReturn: order.isFullOrderReturn
                                        });
                                        %>
                                        
                                        <% if (isFullOrderReturn) { %>
                                            <!-- Full Order Return - Calculate and show shipping-inclusive amounts -->
                                            <div class="full-order-return">
                                                <div class="return-type-badge">
                                                    <i class="fas fa-box"></i>
                                                    Full Order Return
                                                </div>
                                                <div class="refund-calculation">
                                                    <% 
                                                    // If backend values exist, use them; otherwise calculate manually
                                                    let totalBalanceAmount = order.totalBalanceAmount || 0;
                                                    let shippingCharge = order.totalShippingRefund || 0;
                                                    
                                                    // If backend values are not set, calculate manually
                                                    if (totalBalanceAmount === 0) {
                                                        // Calculate total coupon discount
                                                        let totalCouponDiscount = 0;
                                                        if (order.couponDiscount && order.couponDiscount > 0) {
                                                            totalCouponDiscount = order.couponDiscount;
                                                        } else if (order.coupon && order.coupon.discountAmount && order.coupon.discountAmount > 0) {
                                                            totalCouponDiscount = order.coupon.discountAmount;
                                                        }
                                                        
                                                        // Calculate order subtotal
                                                        let orderSubtotal = 0;
                                                        order.products.forEach(item => {
                                                            orderSubtotal += (item.variant.salePrice * item.quantity);
                                                        });
                                                        
                                                        // Calculate balance amount for return pending items
                                                        itemsForReturn.forEach(item => {
                                                            const itemSubtotal = item.variant.salePrice * item.quantity;
                                                            let itemCouponDiscount = 0;
                                                            if (totalCouponDiscount > 0 && orderSubtotal > 0) {
                                                                itemCouponDiscount = (itemSubtotal / orderSubtotal) * totalCouponDiscount;
                                                            }
                                                            const itemFinalAmount = itemSubtotal - itemCouponDiscount;
                                                            totalBalanceAmount += itemFinalAmount;
                                                        });
                                                        
                                                        // Add shipping charge for full order return
                                                        shippingCharge = order.shippingCharge || 0;
                                                    }
                                                    
                                                    totalRefundAmount = totalBalanceAmount + shippingCharge;
                                                    
                                                    console.log('Final calculated values:', {
                                                        totalBalanceAmount,
                                                        shippingCharge,
                                                        totalRefundAmount
                                                    });
                                                    %>
                                                    
                                                    <div class="refund-breakdown">
                                                        <div class="breakdown-line">
                                                            <span class="label">Items Balance:</span>
                                                            <span class="amount">₹<%= totalBalanceAmount.toFixed(2) %></span>
                                                        </div>
                                                        <% if (shippingCharge > 0) { %>
                                                            <div class="breakdown-line shipping">
                                                                <span class="label">Shipping Charge:</span>
                                                                <span class="amount">₹<%= shippingCharge.toFixed(2) %></span>
                                                            </div>
                                                        <% } %>
                                                        <div class="breakdown-line total">
                                                            <span class="label">Total Refund:</span>
                                                            <span class="amount">₹<%= totalRefundAmount.toFixed(2) %></span>
                                                        </div>
                                                    </div>
                                                    
                                                    <% if (shippingCharge > 0) { %>
                                                        <div class="shipping-note">
                                                            <i class="fas fa-info-circle"></i>
                                                            Includes shipping charge refund
                                                        </div>
                                                    <% } %>
                                                </div>
                                            </div>
                                        <% } else { %>
                                            <!-- Partial Return - Show individual items -->
                                            <% itemsForReturn.forEach(product => { 
                                                // Calculate refund amount for partial return (no shipping)
                                                let refundAmount = product.calculatedRefundAmount || 0;
                                                
                                                // If backend value not set, calculate manually
                                                if (refundAmount === 0) {
                                                    // Calculate total coupon discount
                                                    let totalCouponDiscount = 0;
                                                    if (order.couponDiscount && order.couponDiscount > 0) {
                                                        totalCouponDiscount = order.couponDiscount;
                                                    } else if (order.coupon && order.coupon.discountAmount && order.coupon.discountAmount > 0) {
                                                        totalCouponDiscount = order.coupon.discountAmount;
                                                    }
                                                    
                                                    // Calculate order subtotal
                                                    let orderSubtotal = 0;
                                                    order.products.forEach(item => {
                                                        orderSubtotal += (item.variant.salePrice * item.quantity);
                                                    });
                                                    
                                                    const itemSubtotal = product.variant.salePrice * product.quantity;
                                                    let itemCouponDiscount = 0;
                                                    if (totalCouponDiscount > 0 && orderSubtotal > 0) {
                                                        itemCouponDiscount = (itemSubtotal / orderSubtotal) * totalCouponDiscount;
                                                    }
                                                    refundAmount = itemSubtotal - itemCouponDiscount;
                                                }
                                                
                                                totalRefundAmount += refundAmount;
                                            %>
                                                <div class="returned-item">
                                                    <div class="product-refund">
                                                        <span class="product-name-small"><%= product.product.name %> (Size: <%= product.variant.size %>)</span>
                                                        <span class="final-amount">₹<%= refundAmount.toFixed(2) %></span>
                                                    </div>
                                                </div>
                                            <% }) %>
                                            
                                            <% if (itemsForReturn.length > 1) { %>
                                                <div class="total-refund">
                                                    <strong>Total Refund: ₹<%= totalRefundAmount.toFixed(2) %></strong>
                                                </div>
                                            <% } %>
                                        <% } %>
                                        
                                        <div class="payment-method"><%= order.paymentMethod %></div>
                                    </td>
                                    <td>
                                        <div class="return-reason">
                                            <% 
                                            // Get return reason from status history or products
                                            let returnReason = 'No reason provided';
                                            const returnHistory = order.statusHistory.filter(h => h.status === 'return pending').pop();
                                            if (returnHistory && returnHistory.description) {
                                                returnReason = returnHistory.description;
                                            } else {
                                                const productWithReason = order.products.find(p => p.returnReason);
                                                if (productWithReason) {
                                                    returnReason = productWithReason.returnReason;
                                                }
                                            }
                                            %>
                                            <span class="reason-text" title="<%= returnReason %>">
                                                <%= returnReason.length > 50 ? returnReason.substring(0, 50) + '...' : returnReason %>
                                            </span>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="action-buttons">
                                            <button class="action-btn view-btn" 
                                                    onclick="window.location.href='/admin/order/<%= order._id %>'"
                                                    title="View Details">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            
                                            <% if (isFullOrderReturn) { %>
                                                <!-- Full Order Return - Single approve/reject for entire order -->
                                                <button class="action-btn approve-btn"
                                                        onclick="confirmReturnApprove('<%= order._id %>')"
                                                        title="Approve Full Order Return">
                                                    <i class="fas fa-check"></i>
                                                </button>
                                                <button class="action-btn reject-btn"
                                                        onclick="confirmReturnReject('<%= order._id %>')"
                                                        title="Reject Full Order Return">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            <% } else { %>
                                                <!-- Partial Return - Individual approve/reject buttons -->
                                                <% 
                                                const returnPendingProducts = order.products.filter(p => p.status === 'return pending');
                                                returnPendingProducts.forEach((product, index) => { 
                                                %>
                                                    <button class="action-btn approve-btn"
                                                            onclick="confirmReturnApprove('<%= order._id %>', '<%= product.product._id %>', '<%= product.variant.size %>')"
                                                            title="Approve <%= product.product.name %> (Size: <%= product.variant.size %>)">
                                                        <i class="fas fa-check"></i>
                                                    </button>
                                                    <button class="action-btn reject-btn"
                                                            onclick="confirmReturnReject('<%= order._id %>', '<%= product.product._id %>', '<%= product.variant.size %>')"
                                                            title="Reject <%= product.product.name %> (Size: <%= product.variant.size %>)">
                                                        <i class="fas fa-times"></i>
                                                    </button>
                                                <% }) %>
                                            <% } %>
                                        </div>

                                        <!-- Hidden forms for return actions -->
                                        <form id="returnApproveForm-<%= order._id %>" 
                                              action="/admin/order/return-approve/<%= order._id %>" 
                                              method="POST" 
                                              style="display: none;">
                                        </form>
                                        <form id="returnRejectForm-<%= order._id %>" 
                                              action="/admin/order/return-reject/<%= order._id %>" 
                                              method="POST" 
                                              style="display: none;">
                                        </form>
                                    </td>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Pagination -->
            <% if (totalPages > 1) { %>
                <div class="pagination-container">
                    <nav class="pagination-nav">
                        <ul class="pagination">
                            <% for(let i = 1; i <= totalPages; i++) { %>
                                <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                                    <a class="page-link" href="/admin/return-requests?page=<%= i %>">
                                        <%= i %>
                                    </a>
                                </li>
                            <% } %>
                        </ul>
                    </nav>
                </div>
            <% } %>
        <% } else { %>
            <!-- Empty State -->
            <div class="empty-state-card">
                <div class="empty-state-content">
                    <div class="empty-state-icon">
                        <i class="fas fa-undo-alt"></i>
                    </div>
                    <h3 class="empty-state-title">No Return Requests</h3>
                    <p class="empty-state-text">
                        There are currently no pending return requests. All return requests will appear here for your review.
                    </p>
                    <a href="/admin/orders" class="btn-secondary">
                        <i class="fas fa-arrow-left"></i>
                        Back to Orders
                    </a>
                </div>
            </div>
        <% } %>
    </div>
</div>

<style>
    /* Modern Purple Theme Styles for Return Requests Page */
    
    /* Back to Orders Section */
    .back-to-orders-section {
        margin-bottom: 2rem;
        display: flex;
        justify-content: flex-start;
    }

    .btn-back-to-orders {
        background: transparent;
        color: #64748b;
        border: 2px solid #e2e8f0;
        padding: 0.75rem 1.5rem;
        border-radius: 12px;
        font-size: 0.875rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
    }

    .btn-back-to-orders:hover {
        background: #f8fafc;
        border-color: #cbd5e1;
        color: #475569;
        transform: translateY(-2px);
    }

    /* Stats Overview */
    .stats-overview {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: #ffffff;
        border: 1px solid #e2e8f0;
        border-radius: 16px;
        padding: 1.5rem;
        display: flex;
        align-items: center;
        gap: 1rem;
        transition: all 0.3s ease;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        position: relative;
        overflow: hidden;
    }

    .stat-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 4px;
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
    }

    .stat-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 20px rgba(245, 158, 11, 0.3);
    }

    .stat-icon {
        width: 48px;
        height: 48px;
        border-radius: 12px;
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: #ffffff;
        font-size: 1.25rem;
        flex-shrink: 0;
        box-shadow: 0 4px 12px rgba(245, 158, 11, 0.3);
    }

    .stat-content {
        flex: 1;
    }

    .stat-number {
        font-size: 1.75rem;
        font-weight: 700;
        color: #0f172a;
        line-height: 1.2;
        font-family: 'Inter', sans-serif;
    }

    .stat-label {
        font-size: 0.875rem;
        color: #64748b;
        font-weight: 500;
        margin-top: 0.25rem;
    }

    /* Return Requests Table */
    .return-requests-table-card {
        background: #ffffff;
        border: 1px solid #e2e8f0;
        border-radius: 16px;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .table-header {
        padding: 1.5rem 2rem;
        border-bottom: 1px solid #e2e8f0;
        background: linear-gradient(135deg, rgba(245, 158, 11, 0.05) 0%, rgba(217, 119, 6, 0.05) 100%);
    }

    .table-title {
        font-size: 1.125rem;
        font-weight: 600;
        color: #0f172a;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .table-title i {
        color: #f59e0b;
    }

    .table-container {
        overflow-x: auto;
    }

    .return-requests-table {
        width: 100%;
        border-collapse: collapse;
        min-width: 1200px;
    }

    .return-requests-table th {
        background: linear-gradient(135deg, rgba(245, 158, 11, 0.05) 0%, rgba(217, 119, 6, 0.05) 100%);
        padding: 1rem 1.5rem;
        text-align: left;
        font-weight: 600;
        font-size: 0.875rem;
        color: #374151;
        border-bottom: 1px solid #e2e8f0;
        white-space: nowrap;
    }

    .return-requests-table td {
        padding: 1rem 1.5rem;
        border-bottom: 1px solid #f1f5f9;
        font-size: 0.875rem;
        vertical-align: top;
    }

    .return-request-row {
        transition: all 0.3s ease;
    }

    .return-request-row:hover {
        background: linear-gradient(135deg, rgba(245, 158, 11, 0.05) 0%, rgba(217, 119, 6, 0.05) 100%);
    }

    .order-id {
        font-weight: 600;
        color: #f59e0b;
        font-family: 'Inter', sans-serif;
        margin-bottom: 0.25rem;
    }

    .order-date {
        font-size: 0.75rem;
        color: #64748b;
    }

    .request-date {
        font-weight: 500;
        color: #0f172a;
        margin-bottom: 0.25rem;
    }

    .request-time {
        font-size: 0.75rem;
        color: #64748b;
    }

    .customer-info {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .customer-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: #ffffff;
        font-weight: 600;
        font-size: 0.75rem;
        flex-shrink: 0;
    }

    .customer-name {
        font-weight: 500;
        color: #0f172a;
        margin-bottom: 0.125rem;
    }

    .customer-email {
        font-size: 0.75rem;
        color: #64748b;
    }

    .products-info {
        max-width: 200px;
    }

    .product-item {
        margin-bottom: 0.5rem;
    }

    .product-name {
        font-weight: 500;
        color: #0f172a;
        display: block;
        margin-bottom: 0.125rem;
    }

    .product-variant {
        font-size: 0.75rem;
        color: #64748b;
        display: block;
    }

    .more-products {
        font-size: 0.75rem;
        color: #f59e0b;
        font-weight: 500;
        font-style: italic;
    }

    .return-amount {
        font-weight: 600;
        color: #0f172a;
        font-family: 'Inter', sans-serif;
        margin-bottom: 0.25rem;
    }

    .payment-method {
        font-size: 0.75rem;
        color: #64748b;
        font-weight: 500;
    }

    .shipping-note {
        font-size: 0.65rem;
        color: #059669;
        font-style: italic;
        margin-top: 0.125rem;
    }

    /* Refund Amount Styles */
    .returned-item {
        margin-bottom: 0.75rem;
        padding: 0.5rem;
        background: rgba(245, 158, 11, 0.05);
        border-radius: 8px;
        border-left: 3px solid #f59e0b;
    }

    .product-refund {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .product-name-small {
        font-size: 0.75rem;
        font-weight: 500;
        color: #0f172a;
        line-height: 1.3;
    }

    .refund-breakdown {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.75rem;
        flex-wrap: wrap;
    }

    .original-amount {
        color: #64748b;
        text-decoration: line-through;
    }

    .discount-amount {
        color: #059669;
        font-weight: 500;
    }

    .final-amount {
        color: #0f172a;
        font-weight: 600;
        font-size: 0.8rem;
    }

    .total-refund {
        margin-top: 0.5rem;
        padding-top: 0.5rem;
        border-top: 1px solid #e2e8f0;
        font-size: 0.875rem;
        color: #059669;
    }

    /* Full Order Return Styles */
    .full-order-return {
        background: linear-gradient(135deg, rgba(16, 185, 129, 0.05) 0%, rgba(5, 150, 105, 0.05) 100%);
        border: 1px solid rgba(16, 185, 129, 0.2);
        border-radius: 12px;
        padding: 1rem;
        margin-bottom: 0.5rem;
    }

    .return-type-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        background: rgba(16, 185, 129, 0.1);
        color: #059669;
        padding: 0.375rem 0.75rem;
        border-radius: 50px;
        font-size: 0.75rem;
        font-weight: 600;
        margin-bottom: 0.75rem;
        border: 1px solid rgba(16, 185, 129, 0.2);
    }

    .return-type-badge i {
        font-size: 0.7rem;
    }

    .refund-calculation {
        background: #ffffff;
        border-radius: 8px;
        padding: 0.75rem;
        border: 1px solid rgba(16, 185, 129, 0.1);
    }

    .breakdown-line {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.25rem 0;
        font-size: 0.8rem;
    }

    .breakdown-line.discount .label {
        color: #059669;
    }

    .breakdown-line.discount .amount {
        color: #059669;
        font-weight: 500;
    }

    .breakdown-line.shipping .label {
        color: #0ea5e9;
    }

    .breakdown-line.shipping .amount {
        color: #0ea5e9;
        font-weight: 600;
    }

    .breakdown-line.total {
        border-top: 1px solid #e2e8f0;
        margin-top: 0.25rem;
        padding-top: 0.5rem;
        font-weight: 600;
        color: #0f172a;
    }

    .shipping-note {
        font-size: 0.65rem;
        color: #0ea5e9;
        font-style: italic;
        margin-top: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.25rem;
        padding: 0.25rem 0.5rem;
        background: rgba(14, 165, 233, 0.05);
        border-radius: 4px;
        border-left: 2px solid #0ea5e9;
    }

    .shipping-note i {
        font-size: 0.6rem;
    }

    .breakdown-line .label {
        color: #64748b;
        font-weight: 500;
    }

    .breakdown-line .amount {
        color: #0f172a;
        font-weight: 600;
        font-family: 'Inter', sans-serif;
    }

    .simple-refund {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 0.875rem;
    }

    .simple-refund .refund-label {
        color: #64748b;
        font-weight: 500;
    }

    .simple-refund .refund-amount {
        color: #0f172a;
        font-weight: 700;
        font-family: 'Inter', sans-serif;
        font-size: 1rem;
    }

    .return-reason {
        max-width: 200px;
    }

    .reason-text {
        color: #374151;
        line-height: 1.4;
        display: block;
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }

    .action-btn {
        width: 32px;
        height: 32px;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.75rem;
    }

    .view-btn {
        background: rgba(102, 126, 234, 0.1);
        color: #667eea;
    }

    .view-btn:hover {
        background: rgba(102, 126, 234, 0.2);
        transform: translateY(-2px);
    }

    .approve-btn {
        background: rgba(16, 185, 129, 0.1);
        color: #059669;
    }

    .approve-btn:hover {
        background: rgba(16, 185, 129, 0.2);
        transform: translateY(-2px);
    }

    .reject-btn {
        background: rgba(239, 68, 68, 0.1);
        color: #dc2626;
    }

    .reject-btn:hover {
        background: rgba(239, 68, 68, 0.2);
        transform: translateY(-2px);
    }

    /* Pagination */
    .pagination-container {
        display: flex;
        justify-content: center;
        margin-top: 2rem;
    }

    .pagination {
        display: flex;
        gap: 0.5rem;
        list-style: none;
        margin: 0;
        padding: 0;
    }

    .page-item {
        margin: 0;
    }

    .page-link {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        border: 2px solid #e2e8f0;
        border-radius: 8px;
        color: #64748b;
        text-decoration: none;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .page-link:hover {
        border-color: #f59e0b;
        color: #f59e0b;
        transform: translateY(-2px);
    }

    .page-item.active .page-link {
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        border-color: #f59e0b;
        color: #ffffff;
        box-shadow: 0 4px 12px rgba(245, 158, 11, 0.3);
    }

    /* Empty State */
    .empty-state-card {
        background: #ffffff;
        border: 1px solid #e2e8f0;
        border-radius: 16px;
        padding: 4rem 2rem;
        text-align: center;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }

    .empty-state-icon {
        font-size: 4rem;
        color: #cbd5e1;
        margin-bottom: 1.5rem;
    }

    .empty-state-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #374151;
        margin-bottom: 0.5rem;
    }

    .empty-state-text {
        color: #64748b;
        margin-bottom: 2rem;
        max-width: 400px;
        margin-left: auto;
        margin-right: auto;
    }

    /* Alert Styles */
    .alert-modern {
        border: none;
        border-radius: 12px;
        padding: 1rem 1.5rem;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .alert-success {
        background: rgba(16, 185, 129, 0.1);
        color: #059669;
        border-left: 4px solid #10b981;
    }

    .alert-danger {
        background: rgba(239, 68, 68, 0.1);
        color: #dc2626;
        border-left: 4px solid #ef4444;
    }

    /* Buttons */
    .btn-secondary {
        background: transparent;
        color: #64748b;
        border: 2px solid #e2e8f0;
        padding: 0.75rem 1.5rem;
        border-radius: 12px;
        font-size: 0.875rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
    }

    .btn-secondary:hover {
        background: #f8fafc;
        border-color: #cbd5e1;
        color: #475569;
        transform: translateY(-2px);
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .stats-overview {
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        }

        .return-requests-table {
            font-size: 0.75rem;
        }

        .customer-info {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }

        .action-buttons {
            flex-direction: column;
            gap: 0.25rem;
        }

        .action-btn {
            width: 100%;
            height: 28px;
        }

        .products-info,
        .return-reason {
            max-width: none;
        }
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    // Toast configuration
    const Toast = Swal.mixin({
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer);
            toast.addEventListener('mouseleave', Swal.resumeTimer);
        }
    });

    // ✅ Approve return - using Swal
    function confirmReturnApprove(orderId) {
        Swal.fire({
            title: 'Approve Return?',
            text: 'Are you sure you want to approve this return request? This will refund the amount to customer\'s wallet.',
            icon: 'question',
            showCancelButton: true,
            confirmButtonText: 'Yes, Approve',
            cancelButtonText: 'Cancel',
            confirmButtonColor: '#10b981',
            cancelButtonColor: '#6b7280'
        }).then((result) => {
            if (result.isConfirmed) {
                // Show loading state
                Swal.fire({
                    title: 'Processing...',
                    text: 'Approving return request',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                
                document.getElementById(`returnApproveForm-${orderId}`).submit();
            }
        });
    }

    // ✅ Reject return - using Swal
    function confirmReturnReject(orderId) {
        Swal.fire({
            title: 'Reject Return?',
            text: 'Are you sure you want to reject this return request? The order status will be changed back to delivered.',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, Reject',
            cancelButtonText: 'Cancel',
            confirmButtonColor: '#ef4444',
            cancelButtonColor: '#6b7280'
        }).then((result) => {
            if (result.isConfirmed) {
                // Show loading state
                Swal.fire({
                    title: 'Processing...',
                    text: 'Rejecting return request',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });
                
                document.getElementById(`returnRejectForm-${orderId}`).submit();
            }
        });
    }

    // Show success message if redirected after action
    document.addEventListener('DOMContentLoaded', function() {
        const urlParams = new URLSearchParams(window.location.search);
        const success = urlParams.get('success');
        const message = urlParams.get('message');
        
        if (success === 'true' && message) {
            Toast.fire({
                icon: 'success',
                title: decodeURIComponent(message)
            });
            
            // Clean URL
            window.history.replaceState({}, document.title, window.location.pathname);
        }
    });
</script>

<%- include('./partials/footer') %>