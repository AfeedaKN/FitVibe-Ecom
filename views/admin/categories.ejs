<%- include('./partials/header', { pageTitle: 'Category Management' }) %>

<%- include('./partials/sidebar', { page: 'categories' }) %>

<div class="main-content">
    <!-- Top Header -->
    <header class="top-header">
        <div class="header-content">
            <div class="header-left">
                <button class="sidebar-toggle" onclick="toggleSidebar()">
                    <i class="fas fa-bars"></i>
                </button>
                <div>
                    <h1 class="page-title">Category Management</h1>
                    <div class="breadcrumbs">
                        <a href="/admin/dashboard">Dashboard</a>
                        <span class="breadcrumb-separator">/</span>
                        <span>Categories</span>
                    </div>
                </div>
            </div>
            <div class="header-right">
                <button onclick="showForm()" class="btn btn-primary-modern">
                    <i class="fas fa-plus me-2"></i>Add Category
                </button>
                <div class="admin-profile">
                    <div class="admin-avatar">
                        A
                    </div>
                    <div class="admin-info">
                        <div class="admin-name">Admin</div>
                        <div class="admin-role">Administrator</div>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Content Area -->
    <div class="content-area">
        <!-- Stats Overview -->
        <div class="stats-overview">
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-tags"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number"><%= cat ? cat.length : 0 %></div>
                    <div class="stat-label">Total Categories</div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-eye"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number" id="listedCount">
                        <% if (cat && cat.length > 0) { %>
                            <%= cat.filter(c => c.isListed).length %>
                        <% } else { %>
                            0
                        <% } %>
                    </div>
                    <div class="stat-label">Listed</div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-eye-slash"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number" id="unlistedCount">
                        <% if (cat && cat.length > 0) { %>
                            <%= cat.filter(c => !c.isListed).length %>
                        <% } else { %>
                            0
                        <% } %>
                    </div>
                    <div class="stat-label">Unlisted</div>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-plus"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number">
                        <% if (cat && cat.length > 0) { %>
                            <%= cat.filter(c => {
                                const today = new Date();
                                const catDate = new Date(c.createdAt || c.dateCreated);
                                return catDate.toDateString() === today.toDateString();
                            }).length %>
                        <% } else { %>
                            0
                        <% } %>
                    </div>
                    <div class="stat-label">Added Today</div>
                </div>
            </div>
        </div>

        <!-- Filters and Search -->
        <div class="filter-card">
            <div class="filter-header">
                <h3 class="filter-title">
                    <i class="fas fa-filter"></i>
                    Search & Filter Categories
                </h3>
            </div>
            <div class="filter-body">
                <form action="/admin/categories/" method="get" class="filter-form">
                    <div class="filter-row">
                        <div class="filter-group">
                            <label class="filter-label">Search Categories</label>
                            <div class="search-input-wrapper">
                                <input type="text" 
                                       name="search" 
                                       class="search-input" 
                                       placeholder="Search by category name or description..." 
                                       value="<%= search || '' %>">
                                <i class="fas fa-search search-icon"></i>
                            </div>
                        </div>
                        <div class="filter-group">
                            <label class="filter-label">Status</label>
                            <select name="status" class="filter-select">
                                <option value="">All Categories</option>
                                <option value="listed">Listed Only</option>
                                <option value="unlisted">Unlisted Only</option>
                            </select>
                        </div>
                        <div class="filter-group">
                            <label class="filter-label">Sort By</label>
                            <select name="sort" class="filter-select">
                                <option value="-createdAt">Newest First</option>
                                <option value="createdAt">Oldest First</option>
                                <option value="name">Name A-Z</option>
                                <option value="-name">Name Z-A</option>
                            </select>
                        </div>
                    </div>
                    <div class="filter-actions">
                        <button type="submit" class="btn-primary">
                            <i class="fas fa-search"></i>
                            Apply Filters
                        </button>
                        <a href="/admin/categories" class="btn-secondary">
                            <i class="fas fa-times"></i>
                            Clear All
                        </a>
                    </div>
                </form>
            </div>
        </div>

        <!-- Main Content Row -->
        <div class="row g-4">
            <!-- Categories Table -->
            <div class="col-12">
                <!-- Category Form (Hidden by default) -->
                <div class="card-modern no-hover mb-4" id="categoryForm" style="display: none;">
                    <div class="card-header-modern">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-plus me-2"></i>Create New Category
                        </h5>
                    </div>
                    <div class="card-body-modern">
                        <div class="row">
                            <div class="col-lg-6 mx-auto">
                                <form method="post" onsubmit="return handleFormSubmit(event)">
                                    <div class="mb-3">
                                        <label for="product_name" class="form-label fw-medium">Category Name</label>
                                        <input type="text" 
                                               name="name" 
                                               placeholder="Enter category name" 
                                               class="form-control form-control-modern" 
                                               id="product_name" />
                                        <div id="name-error" class="error-message"></div>
                                    </div>
                                    <div class="mb-4">
                                        <label class="form-label fw-medium">Description</label>
                                        <textarea placeholder="Enter category description" 
                                                  name="description" 
                                                  class="form-control form-control-modern" 
                                                  id="descriptionId" 
                                                  rows="4"></textarea>
                                        <div id="description-error" class="error-message"></div>
                                    </div>
                                    <div class="mb-4">
                                        <label for="categoryOffer" class="form-label fw-medium">Offer (%)</label>
                                        <input type="number" 
                                               name="categoryOffer" 
                                               placeholder="Enter offer percentage (0-100)" 
                                               class="form-control form-control-modern" 
                                               id="categoryOffer" 
                                               min="0" 
                                               max="100" 
                                               step="1" 
                                               value="0" />
                                        <div id="categoryOffer-error" class="error-message"></div>
                                    </div>
                                    <div class="d-flex gap-2 justify-content-end">
                                        <button type="button" class="btn btn-outline-modern" onclick="hideForm()">
                                            <i class="fas fa-times me-2"></i>Cancel
                                        </button>
                                        <button class="btn btn-primary-modern" type="submit">
                                            <i class="fas fa-save me-2"></i>Create Category
                                        </button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Categories Table -->
                <% if (cat && cat.length > 0) { %>
                    <div class="categories-table-card">
                        <div class="table-header">
                            <h3 class="table-title">
                                <i class="fas fa-tags"></i>
                                Categories List
                            </h3>
                        </div>
                        <div class="table-container">
                            <table class="categories-table">
                                <thead>
                                    <tr>
                                        <th>
                                            <div class="th-content">
                                                <span>Sl No.</span>
                                                <i class="fas fa-sort"></i>
                                            </div>
                                        </th>
                                        <th>Category Details</th>
                                        <th>Description</th>
                                        <th>Created Date</th>
                                        <th>Offer (%)</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% cat.forEach((category, index) => { %>
                                        <tr class="category-row" data-category-id="<%= category._id %>">
                                            <td>
                                                <span class="serial-number"><%= (currentPage - 1) * 5 + index + 1 %></span>
                                            </td>
                                            <td>
                                                <div class="category-info">
                                                    <div class="category-icon">
                                                        <i class="fas fa-tag"></i>
                                                    </div>
                                                    <div class="category-details">
                                                        <div class="category-name"><%= category.name %></div>
                                                        <div class="category-id">ID: #<%= category._id.toString().slice(-8).toUpperCase() %></div>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="category-description">
                                                    <%= category.description || 'No description provided' %>
                                                </div>
                                            </td>
                                            <td>
                                                <div class="created-date">
                                                    <%= (category.createdAt || new Date()).toLocaleDateString('en-IN', { 
                                                        year: 'numeric', 
                                                        month: 'short', 
                                                        day: 'numeric' 
                                                    }) %>
                                                </div>
                                                <div class="created-time">
                                                    <%= (category.createdAt || new Date()).toLocaleTimeString('en-IN', { 
                                                        hour: '2-digit', 
                                                        minute: '2-digit' 
                                                    }) %>
                                                </div>
                                            </td>
                                            <td>
                                                <span class="offer-value"><%= category.categoryOffer %>%</span>
                                            </td>
                                            <td>
                                                <span class="status-badge status-<%= category.isListed ? 'listed' : 'unlisted' %>">
                                                    <i class="fas fa-circle"></i>
                                                    <%= category.isListed ? 'Listed' : 'Unlisted' %>
                                                </span>
                                            </td>
                                            <td>
                                                <div class="action-buttons">
                                                    <button class="action-btn edit-btn"
                                                            onclick="openEditModal('<%= encodeURIComponent(category._id) %>', '<%= encodeURIComponent(category.name) %>', '<%= encodeURIComponent(category.description || '') %>', '<%= category.categoryOffer %>')"
                                                            title="Edit Category">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <% if (category.isListed) { %>
                                                        <button class="action-btn unlist-btn"
                                                                onclick="toggleCategory('<%= encodeURIComponent(category._id) %>', 'unlist')"
                                                                title="Unlist Category">
                                                            <i class="fas fa-eye-slash"></i>
                                                        </button>
                                                    <% } else { %>
                                                        <button class="action-btn list-btn"
                                                                onclick="toggleCategory('<%= encodeURIComponent(category._id) %>', 'list')"
                                                                title="List Category">
                                                            <i class="fas fa-eye"></i>
                                                        </button>
                                                    <% } %>
                                                    <button class="action-btn delete-btn"
                                                            onclick="deleteCategory('<%= category._id %>')"
                                                            title="Delete Category">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    <% }) %>
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Pagination -->
                    <% if (totalPages > 1) { %>
                        <div class="pagination-container">
                            <nav class="pagination-nav">
                                <ul class="pagination">
                                    <% for(let i = 1; i <= totalPages; i++) { %>
                                        <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                                            <a class="page-link" 
                                               href="/admin/categories?page=<%= i %><%= search ? '&search=' + encodeURIComponent(search) : '' %>">
                                                <%= i %>
                                            </a>
                                        </li>
                                    <% } %>
                                </ul>
                            </nav>
                        </div>
                    <% } %>
                <% } else { %>
                    <!-- Empty State -->
                    <div class="empty-state-card">
                        <div class="empty-state-content">
                            <div class="empty-state-icon">
                                <i class="fas fa-tags"></i>
                            </div>
                            <h3 class="empty-state-title">No Categories Found</h3>
                            <p class="empty-state-text">
                                <% if (search) { %>
                                    No categories match your current search criteria. Try adjusting your filters.
                                <% } else { %>
                                    Categories will appear here once you start creating them.
                                <% } %>
                            </p>
                            <% if (search) { %>
                                <a href="/admin/categories" class="btn-secondary">
                                    <i class="fas fa-times"></i>
                                    Clear Filters
                                </a>
                            <% } else { %>
                                <button onclick="showForm()" class="btn-primary">
                                    <i class="fas fa-plus"></i>
                                    Create First Category
                                </button>
                            <% } %>
                        </div>
                    </div>
                <% } %>
            </div>
        </div>
    </div>
</div>

<!-- Edit Category Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content modal-modern">
            <div class="modal-header modal-header-modern">
                <h5 class="modal-title fw-semibold" id="editModalLabel">
                    <i class="fas fa-edit me-2"></i>Edit Category
                </h5>
                <button type="button" class="btn-close btn-close-modern" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editCategoryForm" onsubmit="return validateEditForm(event)">
                <input type="hidden" id="editId" name="id">
                <div class="modal-body modal-body-modern">
                    <div class="mb-3">
                        <label for="editName" class="form-label fw-medium">Category Name</label>
                        <input type="text" 
                               id="editName" 
                               name="name" 
                               class="form-control form-control-modern" 
                               required>
                        <div id="edit-name-error" class="error-message"></div>
                    </div>
                    <div class="mb-3">
                        <label for="editDescription" class="form-label fw-medium">Description</label>
                        <textarea id="editDescription" 
                                  name="description" 
                                  class="form-control form-control-modern" 
                                  rows="4" 
                                  maxlength="500"></textarea>
                        <div id="edit-description-error" class="error-message"></div>
                    </div>
                    <div class="mb-3">
                        <label for="editCategoryOffer" class="form-label fw-medium">Offer (%)</label>
                        <input type="number" 
                               id="editCategoryOffer" 
                               name="categoryOffer" 
                               class="form-control form-control-modern" 
                               min="0" 
                               max="100" 
                               step="1" 
                               value="0" />
                        <div id="edit-categoryOffer-error" class="error-message"></div>
                    </div>
                </div>
                <div class="modal-footer modal-footer-modern">
                    <button type="button" class="btn btn-outline-modern" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button type="submit" class="btn btn-primary-modern">
                        <i class="fas fa-save me-2"></i>Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    
    .stats-overview {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: #ffffff;
        border: 1px solid #e2e8f0;
        border-radius: 16px;
        padding: 1.5rem;
        display: flex;
        align-items: center;
        gap: 1rem;
        transition: all 0.3s ease;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        position: relative;
        overflow: hidden;
    }

    .stat-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 4px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .stat-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
    }

    .stat-icon {
        width: 48px;
        height: 48px;
        border-radius: 12px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: #ffffff;
        font-size: 1.25rem;
        flex-shrink: 0;
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }

    .stat-content {
        flex: 1;
    }

    .stat-number {
        font-size: 1.75rem;
        font-weight: 700;
        color: #0f172a;
        line-height: 1.2;
        font-family: 'Inter', sans-serif;
    }

    .stat-label {
        font-size: 0.875rem;
        color: #64748b;
        font-weight: 500;
        margin-top: 0.25rem;
    }

    /* Filter Card */
    .filter-card {
        background: #ffffff;
        border: 1px solid #e2e8f0;
        border-radius: 16px;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }

    .filter-header {
        padding: 1.5rem 2rem 0;
        border-bottom: 1px solid #e2e8f0;
    }

    .filter-title {
        font-size: 1.125rem;
        font-weight: 600;
        color: #0f172a;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .filter-title i {
        color: #667eea;
    }

    .filter-body {
        padding: 2rem;
    }

    .filter-form {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .filter-row {
        display: grid;
        grid-template-columns: 2fr 1fr 1fr;
        gap: 1.5rem;
    }

    .filter-group {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .filter-label {
        font-size: 0.875rem;
        font-weight: 600;
        color: #374151;
    }

    .search-input-wrapper {
        position: relative;
    }

    .search-input {
        width: 100%;
        padding: 0.75rem 1rem 0.75rem 2.5rem;
        border: 2px solid #e2e8f0;
        border-radius: 12px;
        font-size: 0.875rem;
        transition: all 0.3s ease;
        background: #ffffff;
    }

    .search-input:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        transform: translateY(-2px);
    }

    .search-icon {
        position: absolute;
        left: 0.75rem;
        top: 50%;
        transform: translateY(-50%);
        color: #94a3b8;
        font-size: 0.875rem;
    }

    .filter-select {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 2px solid #e2e8f0;
        border-radius: 12px;
        font-size: 0.875rem;
        background: #ffffff;
        transition: all 0.3s ease;
    }

    .filter-select:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        transform: translateY(-2px);
    }

    .filter-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-start;
    }

    /* Buttons */
    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: #ffffff;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 12px;
        font-size: 0.875rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 20px rgba(102, 126, 234, 0.4);
        color: #ffffff;
    }

    .btn-secondary {
        background: transparent;
        color: #64748b;
        border: 2px solid #e2e8f0;
        padding: 0.75rem 1.5rem;
        border-radius: 12px;
        font-size: 0.875rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
    }

    .btn-secondary:hover {
        background: #f8fafc;
        border-color: #cbd5e1;
        color: #475569;
        transform: translateY(-2px);
    }

    /* Categories Table */
    .categories-table-card {
        background: #ffffff;
        border: 1px solid #e2e8f0;
        border-radius: 16px;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .table-header {
        padding: 1.5rem 2rem;
        border-bottom: 1px solid #e2e8f0;
        background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
    }

    .table-title {
        font-size: 1.125rem;
        font-weight: 600;
        color: #0f172a;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .table-title i {
        color: #667eea;
    }

    .table-container {
        overflow-x: auto;
    }

    .categories-table {
        width: 100%;
        border-collapse: collapse;
    }

    .categories-table th {
        background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
        padding: 1rem 1.5rem;
        text-align: left;
        font-weight: 600;
        font-size: 0.875rem;
        color: #374151;
        border-bottom: 1px solid #e2e8f0;
    }

    .th-content {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .th-content i {
        color: #94a3b8;
        font-size: 0.75rem;
    }

    .categories-table td {
        padding: 1rem 1.5rem;
        border-bottom: 1px solid #f1f5f9;
        font-size: 0.875rem;
    }

    .category-row {
        transition: all 0.3s ease;
    }

    .category-row:hover {
        background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
    }

    .serial-number {
        font-family: 'Inter', sans-serif;
        font-weight: 600;
        color: #667eea;
        font-size: 0.875rem;
    }

    .category-info {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .category-icon {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: #ffffff;
        font-size: 1rem;
        flex-shrink: 0;
    }

    .category-details {
        flex: 1;
    }

    .category-name {
        font-weight: 500;
        color: #0f172a;
        margin-bottom: 0.125rem;
    }

    .category-id {
        font-size: 0.75rem;
        color: #64748b;
        font-family: 'Inter', sans-serif;
    }

    .category-description {
        color: #374151;
        font-size: 0.875rem;
        max-width: 250px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .created-date {
        font-weight: 500;
        color: #0f172a;
    }

    .created-time {
        font-size: 0.75rem;
        color: #64748b;
        margin-top: 0.25rem;
    }

    /* Status Badges */
    .status-badge {
        display: inline-flex;
        align-items: center;
        gap: 0.375rem;
        padding: 0.375rem 0.75rem;
        border-radius: 50px;
        font-size: 0.75rem;
        font-weight: 500;
        text-transform: capitalize;
    }

    .status-badge i {
        font-size: 0.5rem;
    }

    .status-listed {
        background: rgba(16, 185, 129, 0.1);
        color: #059669;
        border: 1px solid rgba(16, 185, 129, 0.2);
    }

    .status-unlisted {
        background: rgba(239, 68, 68, 0.1);
        color: #dc2626;
        border: 1px solid rgba(239, 68, 68, 0.2);
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        gap: 0.5rem;
    }

    .action-btn {
        width: 32px;
        height: 32px;
        border-radius: 8px;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.75rem;
    }

    .edit-btn {
        background: rgba(102, 126, 234, 0.1);
        color: #667eea;
    }

    .edit-btn:hover {
        background: rgba(102, 126, 234, 0.2);
        transform: translateY(-2px);
    }

    .list-btn {
        background: rgba(16, 185, 129, 0.1);
        color: #059669;
    }

    .list-btn:hover {
        background: rgba(16, 185, 129, 0.2);
        transform: translateY(-2px);
    }

    .unlist-btn {
        background: rgba(251, 191, 36, 0.1);
        color: #d97706;
    }

    .unlist-btn:hover {
        background: rgba(251, 191, 36, 0.2);
        transform: translateY(-2px);
    }

    .delete-btn {
        background: rgba(239, 68, 68, 0.1);
        color: #dc2626;
    }

    .delete-btn:hover {
        background: rgba(239, 68, 68, 0.2);
        transform: translateY(-2px);
    }

    /* Pagination */
    .pagination-container {
        display: flex;
        justify-content: center;
        margin-top: 2rem;
    }

    .pagination {
        display: flex;
        gap: 0.5rem;
        list-style: none;
        margin: 0;
        padding: 0;
    }

    .page-item {
        margin: 0;
    }

    .page-link {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        border: 2px solid #e2e8f0;
        border-radius: 8px;
        color: #64748b;
        text-decoration: none;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .page-link:hover {
        border-color: #667eea;
        color: #667eea;
        transform: translateY(-2px);
    }

    .page-item.active .page-link {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-color: #667eea;
        color: #ffffff;
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }

    /* Empty State */
    .empty-state-card {
        background: #ffffff;
        border: 1px solid #e2e8f0;
        border-radius: 16px;
        padding: 4rem 2rem;
        text-align: center;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }

    .empty-state-icon {
        font-size: 4rem;
        color: #cbd5e1;
        margin-bottom: 1.5rem;
    }

    .empty-state-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #374151;
        margin-bottom: 0.5rem;
    }

    .empty-state-text {
        color: #64748b;
        margin-bottom: 2rem;
    }

    /* Form Styles */
    .card-modern {
        background: #ffffff;
        border: 1px solid #e2e8f0;
        border-radius: 16px;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .card-header-modern {
        padding: 1.5rem 2rem;
        border-bottom: 1px solid #e2e8f0;
        background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
    }

    .card-title {
        font-size: 1.125rem;
        font-weight: 600;
        color: #0f172a;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .card-title i {
        color: #667eea;
    }

    .card-body-modern {
        padding: 2rem;
    }

    .form-label {
        font-size: 0.875rem;
        font-weight: 600;
        color: #374151;
        margin-bottom: 0.5rem;
    }

    .form-control-modern {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 2px solid #e2e8f0;
        border-radius: 12px;
        font-size: 0.875rem;
        background: #ffffff;
        transition: all 0.3s ease;
    }

    .form-control-modern:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        transform: translateY(-2px);
    }

    .error-message {
        color: #dc2626;
        font-size: 0.75rem;
        margin-top: 0.25rem;
        display: none;
    }

    /* Modal Styles */
    .modal-content {
        border: none;
        border-radius: 16px;
        box-shadow: 0 20px 40px -12px rgba(0, 0, 0, 0.25);
    }

    .modal-header-modern {
        background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
        border-bottom: 1px solid #e2e8f0;
        border-radius: 16px 16px 0 0;
        padding: 1.5rem 2rem;
    }

    .modal-title {
        font-size: 1.125rem;
        font-weight: 600;
        color: #0f172a;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .modal-title i {
        color: #667eea;
    }

    .modal-body-modern {
        padding: 2rem;
        background: #ffffff;
        color: #0f172a;
    }

    .modal-footer-modern {
        background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
        border-top: 1px solid #e2e8f0;
        border-radius: 0 0 16px 16px;
        padding: 1.5rem 2rem;
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
    }

    .btn-close-modern {
        background: none;
        border: none;
        opacity: 0.6;
        font-size: 1.25rem;
        color: #64748b;
    }

    .btn-close-modern:hover {
        opacity: 1;
        color: #374151;
    }

    .btn-primary-modern {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: #ffffff;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 12px;
        font-size: 0.875rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }

    .btn-primary-modern:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 20px rgba(102, 126, 234, 0.4);
        color: #ffffff;
    }

    .btn-outline-modern {
        background: transparent;
        color: #64748b;
        border: 2px solid #e2e8f0;
        padding: 0.75rem 1.5rem;
        border-radius: 12px;
        font-size: 0.875rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        text-decoration: none;
    }

    .btn-outline-modern:hover {
        background: #f8fafc;
        border-color: #cbd5e1;
        color: #475569;
        transform: translateY(-2px);
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .stats-overview {
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        }

        .filter-row {
            grid-template-columns: 1fr;
        }

        .filter-actions {
            flex-direction: column;
        }

        .categories-table {
            font-size: 0.75rem;
        }

        .category-info {
            flex-direction: column;
            align-items: flex-start;
            gap: 0.5rem;
        }

        .action-buttons {
            flex-direction: column;
            gap: 0.25rem;
        }

        .action-btn {
            width: 100%;
            height: 28px;
        }

        .category-description {
            max-width: 150px;
        }
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>

<script>
    function showForm() {
    document.getElementById('categoryForm').style.display = 'block';
    document.getElementById('categoryForm').scrollIntoView({ behavior: 'smooth' });
}

function hideForm() {
    document.getElementById('categoryForm').style.display = 'none';
    document.querySelector('input[name="name"]').value = '';
    document.getElementById('descriptionId').value = '';
    document.getElementById('categoryOffer').value = '0';
    clearErrorMessages();
}

function handleFormSubmit(event) {
    event.preventDefault();
    if (!validateForm()) {
        return false;
    }
    const name = document.getElementsByName("name")[0].value;
    const description = document.getElementById("descriptionId").value;
    const categoryOffer = document.getElementById("categoryOffer").value;

    fetch('/admin/addCategory', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ name, description, categoryOffer })
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(err => {
                throw new Error(err.error || err.message);
            });
        }
        return response.json();
    })
    .then(data => {
        Swal.fire({
            icon: 'success',
            title: 'Success',
            text: 'Category added successfully',
            background: '#ffffff',
            color: '#171717',
            confirmButtonColor: '#171717'
        }).then(() => {
            location.reload();
        });
    })
    .catch(error => {
        Swal.fire({
            icon: 'error',
            title: "Error",
            text: error.message || "An error occurred while adding the category",
            background: '#ffffff',
            color: '#171717',
            confirmButtonColor: '#525252'
        });
    });
}

function validateForm() {
    clearErrorMessages();
    const name = document.querySelector('input[name="name"]').value.trim();
    const description = document.getElementById("descriptionId").value.trim();
    const categoryOffer = document.getElementById("categoryOffer").value.trim();
    let isValid = true;

    if (name === "") {
        displayErrorMessage("name-error", "Please enter a name");
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(name)) {
        displayErrorMessage("name-error", "Category name should contain only alphabetic characters");
        isValid = false;
    }
    if (description === "") {
        displayErrorMessage("description-error", "Please enter a description");
        isValid = false;
    }
    if (categoryOffer === "" || isNaN(categoryOffer) || categoryOffer < 0 || categoryOffer > 100) {
        displayErrorMessage("categoryOffer-error", "Please enter a valid offer percentage (0-100)");
        isValid = false;
    }

    return isValid;
}

function validateEditForm(event) {
    event.preventDefault();
    clearEditErrorMessages();
    const name = document.getElementById("editName").value.trim();
    const description = document.getElementById("editDescription").value.trim();
    const categoryOffer = document.getElementById("editCategoryOffer").value.trim();
    let isValid = true;

    if (name === "") {
        displayEditErrorMessage("edit-name-error", "Please enter a name");
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(name)) {
        displayEditErrorMessage("edit-name-error", "Category name should contain only alphabetic characters");
        isValid = false;
    }
    if (description === "") {
        displayEditErrorMessage("edit-description-error", "Please enter a description");
        isValid = false;
    }
    if (categoryOffer === "" || isNaN(categoryOffer) || categoryOffer < 0 || categoryOffer > 100) {
        displayEditErrorMessage("edit-categoryOffer-error", "Please enter a valid offer percentage (0-100)");
        isValid = false;
    }

    if (isValid) {
        submitEditForm();
    }
    return false;
}

function submitEditForm() {
    const formData = new FormData(document.getElementById('editCategoryForm'));
    const data = Object.fromEntries(formData);

    fetch('/admin/editCategory', {
        method: 'PATCH',
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify(data)
    })
    .then(response => {
        return response.json();
    })
    .then(result => {
        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: result.message,
                background: '#ffffff',
                color: '#171717',
                confirmButtonColor: '#171717'
            });
            closeEditModal();
            window.location.reload();
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: result.message || 'Failed to update category',
                background: '#ffffff',
                color: '#171717',
                confirmButtonColor: '#525252'
            });
        }
    })
    .catch(error => {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: `An error occurred while updating the category: ${error.message}`,
            background: '#ffffff',
            color: '#171717',
            confirmButtonColor: '#525252'
        });
    });
}

function displayErrorMessage(elementId, message) {
    var errorElement = document.getElementById(elementId);
    errorElement.innerText = message;
    errorElement.style.display = "block";
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName("error-message");
    Array.from(errorElements).forEach((element) => {
        element.innerText = "";
        element.style.display = "none";
    });
}

function displayEditErrorMessage(elementId, message) {
    var errorElement = document.getElementById(elementId);
    errorElement.innerText = message;
    errorElement.style.display = "block";
}

function clearEditErrorMessages() {
    const errorElements = document.getElementsByClassName("error-message");
    Array.from(errorElements).forEach((element) => {
        element.innerText = "";
        element.style.display = "none";
    });
}

function openEditModal(id, name, description, categoryOffer) {
    const editId = document.getElementById('editId');
    const editName = document.getElementById('editName');
    const editDescription = document.getElementById('editDescription');
    const editCategoryOffer = document.getElementById('editCategoryOffer');
    const editModal = new bootstrap.Modal(document.getElementById('editModal'));

    if (!editId || !editName || !editDescription || !editCategoryOffer) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Modal elements not found',
            background: '#ffffff',
            color: '#171717',
            confirmButtonColor: '#525252'
        });
        return;
    }

    editId.value = decodeURIComponent(id);
    editName.value = decodeURIComponent(name);
    editDescription.value = decodeURIComponent(description || '');
    editCategoryOffer.value = decodeURIComponent(categoryOffer) || 0;
    editModal.show();
}

function closeEditModal() {
    const editModal = bootstrap.Modal.getInstance(document.getElementById('editModal'));
    if (editModal) {
        editModal.hide();
    }
    document.getElementById('editCategoryForm').reset();
    clearEditErrorMessages();
}

async function toggleCategory(categoryId, action) {
    const confirmMessage = `Are you sure you want to ${action} this category?`;
    const result = await Swal.fire({
        title: confirmMessage,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#171717',
        cancelButtonColor: '#525252',
        confirmButtonText: 'Yes, proceed!',
        background: '#ffffff',
        color: '#171717'
    });

    if (!result.isConfirmed) {
        return;
    }

    try {
        const endpoint = action === 'unlist' ? '/admin/deleteCategory' : '/admin/restoreCategory';
        const response = await fetch(`${endpoint}?id=${encodeURIComponent(categoryId)}`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            credentials: 'include'
        });

        const result = await response.json();
        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: result.message,
                background: '#ffffff',
                color: '#171717',
                confirmButtonColor: '#171717'
            });
            // Update UI without reload
            try {
                const decodedId = decodeURIComponent(categoryId);
                const row = document.querySelector(`tr.category-row[data-category-id="${decodedId}"]`);
                const listedCountEl = document.getElementById('listedCount');
                const unlistedCountEl = document.getElementById('unlistedCount');
                if (row) {
                    const statusBadge = row.querySelector('.status-badge');
                    const actionButtons = row.querySelector('.action-buttons');

                    if (action === 'unlist') {
                        // Switch to Unlisted
                        if (statusBadge) {
                            statusBadge.classList.remove('status-listed');
                            statusBadge.classList.add('status-unlisted');
                            statusBadge.innerHTML = '<i class="fas fa-circle"></i> Unlisted';
                        }
                        if (actionButtons) {
                            const oldBtn = actionButtons.querySelector('.unlist-btn');
                            const newBtn = document.createElement('button');
                            newBtn.className = 'action-btn list-btn';
                            newBtn.title = 'List Category';
                            newBtn.innerHTML = '<i class="fas fa-eye"></i>';
                            newBtn.onclick = () => toggleCategory(encodeURIComponent(decodedId), 'list');
                            if (oldBtn) actionButtons.replaceChild(newBtn, oldBtn);
                        }
                        if (listedCountEl && unlistedCountEl) {
                            const listed = Math.max(0, parseInt(listedCountEl.textContent || '0', 10) - 1);
                            const unlisted = parseInt(unlistedCountEl.textContent || '0', 10) + 1;
                            listedCountEl.textContent = listed;
                            unlistedCountEl.textContent = unlisted;
                        }
                    } else {
                        // Switch to Listed
                        if (statusBadge) {
                            statusBadge.classList.remove('status-unlisted');
                            statusBadge.classList.add('status-listed');
                            statusBadge.innerHTML = '<i class="fas fa-circle"></i> Listed';
                        }
                        if (actionButtons) {
                            const oldBtn = actionButtons.querySelector('.list-btn');
                            const newBtn = document.createElement('button');
                            newBtn.className = 'action-btn unlist-btn';
                            newBtn.title = 'Unlist Category';
                            newBtn.innerHTML = '<i class="fas fa-eye-slash"></i>';
                            newBtn.onclick = () => toggleCategory(encodeURIComponent(decodedId), 'unlist');
                            if (oldBtn) actionButtons.replaceChild(newBtn, oldBtn);
                        }
                        if (listedCountEl && unlistedCountEl) {
                            const listed = parseInt(listedCountEl.textContent || '0', 10) + 1;
                            const unlisted = Math.max(0, parseInt(unlistedCountEl.textContent || '0', 10) - 1);
                            listedCountEl.textContent = listed;
                            unlistedCountEl.textContent = unlisted;
                        }
                    }
                }
            } catch (e) {
                console.error('UI update error:', e);
            }
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: result.message || `Failed to ${action} category`,
                background: '#ffffff',
                color: '#171717',
                confirmButtonColor: '#525252'
            });
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: `An error occurred while ${action}ing the category: ${error.message}`,
            background: '#ffffff',
            color: '#171717',
            confirmButtonColor: '#525252'
        });
    }
}

function deleteCategory(categoryId) {
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#525252',
        cancelButtonColor: '#a3a3a3',
        confirmButtonText: 'Yes, delete it!',
        background: '#ffffff',
        color: '#171717'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/categoryDelete?id=${categoryId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Deleted!',
                        text: data.message,
                        background: '#ffffff',
                        color: '#171717',
                        confirmButtonColor: '#171717'
                    }).then(() => {
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: data.message || 'Failed to delete category',
                        background: '#ffffff',
                        color: '#171717',
                        confirmButtonColor: '#525252'
                    });
                }
            })
            .catch(error => {
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: `An error occurred while deleting the category: ${error.message}`,
                    background: '#ffffff',
                    color: '#171717',
                    confirmButtonColor: '#525252'
                });
            });
        }
    });
}

// Initialize tooltips
document.addEventListener('DOMContentLoaded', function() {
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
});
</script>

<%- include('./partials/footer') %>